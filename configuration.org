* Startup
#+begin_src emacs-lisp :results none
  (defvar file-name-handler-alist-old file-name-handler-alist)

  (setq package-enable-at-startup nil
        file-name-handler-alist nil
        message-log-max 16384
        gc-cons-threshold 402653184
        gc-cons-percentage 0.6
        auto-window-vscroll nil)

  (add-hook 'after-init-hook
            `(lambda ()
               (setq file-name-handler-alist file-name-handler-alist-old
                     gc-cons-threshold 800000
                     gc-cons-percentage 0.1)
               (message "Emacs started in: %s" (emacs-init-time))
               (garbage-collect)
               (display-battery-mode)) t)
#+end_src
* Configure =use-package=
I use =use-package= to install and configure my packages. My =init.el=
includes the initial setup for =package.el= and ensures that
=use-package= is installed, since I wanna do that right away.

This makes sure that =use-package= will install the package if it's
not already available. It also means that I should be able to open
Emacs for the first time on a fresh Debian box and have my whole
environment automatically installed. I'm not /totally/ sure about
that, but we're gettin' close.

#+begin_src emacs-lisp :results none
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the newest version available.
#+begin_src emacs-lisp :results none
(use-package auto-compile
  :config (auto-compile-on-load-mode))

(setq load-prefer-newer t)
#+end_src

Quelpa configuration.
#+begin_src emacs-lisp :results none
(use-package quelpa
  :ensure t)

(use-package quelpa-use-package
  :ensure t)
#+end_src

* Visuals
Font.
#+begin_src emacs-lisp :results none
(set-face-attribute 'default nil :font "SF Mono-11")
(set-face-attribute 'fixed-pitch nil :font "SF Mono-12")
(set-face-attribute 'variable-pitch nil :font "Lato-15")
#+end_src
 
Hide all the bezels.
#+begin_src emacs-lisp :results none
(tool-bar-mode -1)
(menu-bar-mode -1)
(toggle-scroll-bar -1)
#+end_src

Color theme.
#+begin_src emacs-lisp :results none
(add-to-list 'custom-theme-load-path "~/my-emacs/themes")
;; (load-theme 'noctilux t)
(load-theme 'modus-operandi t)
#+end_src
 
#+begin_src emacs-lisp :results none
(use-package modus-operandi-theme
  :ensure t
  :config 
  (setq modus-operandi-theme-section-headings t))
#+end_src

* Sensible settings
Disable backup and lockfiles.
#+begin_src emacs-lisp :results none
(setq make-backup-files nil)
(setq create-lockfiles nil)
#+end_src

Disable saving the clipboard after exiting Emacs.
#+begin_src emacs-lisp :results none
(setq x-select-enable-clipboard-manager nil)
#+end_src

Convert tabs to spaces.
#+begin_src emacs-lisp :results none
(setq tab-width 2)
(setq indent-tabs-mode nil)
#+end_src

Ask before closing Emacs.
#+begin_src emacs-lisp :results none
(setq confirm-kill-emacs 'y-or-n-p)
#+end_src

Use colors in compilation buffer.
defer?
#+begin_src emacs-lisp :results none
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (ansi-color-apply-on-region compilation-filter-start (point)))
  
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+end_src
  
Open buffer position
#+begin_src emacs-lisp :results none
(setq display-buffer-alist
  '(("\\*\\(compilation\\)\\*"
     (display-buffer-reuse-window)
     (side            . bottom)
     (reusable-frames . visible)
     (window-height   . 0.33))

   ("\\*\\(Flycheck errors\\)\\*"
     (display-buffer-in-side-window)
     (side            . bottom)
     (reusable-frames . visible)
     (slot            . 1)
     (window-height   . 0.33))

    ("\\*Org todo\\*"
     (display-buffer-in-side-window)
     (side            . bottom)
     (reusable-frames . visible)
     (window-height   . 0.2))

    ("\\*\\([Hh]elp\\|Messages\\|helpful.*\\)\\*"
     (display-buffer-in-side-window)
     (side           . right)
     (window-width   . 0.5))

    ("\\*\\(eshell\\|Python\\|Synonyms List\\)\\*"
     (display-buffer-in-side-window)
     (side           . bottom)
     (window-height  . 0.4))

    ("\\*\\(Buffer List\\)\\*"
     (display-buffer-same-window))

    ("^magit:.*"
     (display-buffer-same-window))))
#+end_src

Line wrapping.
#+begin_src emacs-lisp :results none
(setq-default truncate-lines t)
(setq truncate-lines t)
(setq truncate-partial-width-windows nil)
(setq-default fill-column 80)
#+end_src
  
Allow remembering risky variables
#+begin_src emacs-lisp :results none
(defun risky-local-variable-p (sym &optional _ignored) nil)
#+end_src

Compilation settings.
#+begin_src emacs-lisp :results none
(setq compilation-scroll-output t)
(setq compilation-always-kill t)
#+end_src

* Miscellaneous
#+begin_src emacs-lisp :results none
(setq auth-sources '("~/.authinfo"))
#+end_src

* Configure =general=
** Leader Key
#+begin_src emacs-lisp :results none
(use-package general
  :ensure t
  :init
   (setq general-override-states '(insert
                                   emacs
                                   hybrid
                                   normal
                                   visual
                                   motion
                                   operator
                                   replace)))

(general-create-definer leader-def 
  :prefix "SPC")

(leader-def
  :states '(normal visual motion)
  :keymaps 'override
    "a" #'hydra-agenda/body
    "b" #'hydra-buffer/body
    "c" #'hydra-compile/body
    "d d" #'dockel
    "h" #'hydra-help/body
    "f" #'hydra-file/body
    "g" #'hydra-git/body
    "l" #'hydra-lsp/body
    "k" #'helm-show-kill-ring
    "p" #'hydra-project/body
    "r" #'hydra-resize/body
    "o" #'hydra-open/body
    "s" #'hydra-search/body
    "u" #'universal-argument
    "w" #'hydra-window/body
    "e e" #'elfeed
    "e d" #'ediff
    "t r" #'+core/reload-theme
    "y a" #'yas-new-snippet
    "y v" #'yas-visit-snippet-file
    "y c" #'company-yasnippet
    "y p" #'+core/copy-file-path
    "RET" #'counsel-bookmark
    "TAB" #'hydra-workspace/body
    "SPC" #'counsel-projectile-find-file
    "," #'counsel-projectile-switch-to-buffer)
#+end_src

** Local leader
#+begin_src emacs-lisp :results none
(general-create-definer local-leader-def
  :prefix "SPC m")

(local-leader-def
  :states 'normal
  :keymaps 'org-mode-map
    "s" #'org-schedule
    "d" #'org-deadline
    "t" #'org-todo)
    
(local-leader-def
  :states 'normal
  :keymaps 'python-mode-map
    "s" #'run-python)
#+end_src

** SPC j (org-mode)
#+begin_src emacs-lisp :results none
(general-define-key 
  :prefix "SPC j"
  :states 'normal
  :keymaps 'org-mode-map
  "a" (lambda () (interactive) (jupyter-org-insert-src-block nil current-prefix-arg))
  "b" (lambda () (interactive) (jupyter-org-insert-src-block t current-prefix-arg))
  "x" #'jupyter-org-kill-block-and-results
  "c" #'org-babel-remove-result
  "j" #'org-babel-next-src-block
  "k" #'org-babel-previous-src-block
  "r" #'jupyter-run-repl
  "E" #'jupyter-org-execute-to-point)
#+end_src

* Use =evil-mode=
  Use =evil-mode=
  #+begin_src emacs-lisp :results none
  (use-package evil
    :ensure t
    :demand
    :init
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)
    (setq aw-keys '(?h ?j ?k ?l ?a ?s ?d ?f))
    :bind (:map evil-motion-state-map
          ("C-w C-w" . ace-window)
          ("C-w w"   . ace-window)))
  
  (use-package evil-collection
    :after evil
    :ensure t
    :config
      (evil-collection-init))
    
  (setq evil-ex-substitute-global t)
  #+end_src

  Use =evil-commentary=
  #+begin_src emacs-lisp :results none
  (use-package evil-commentary
     :after evil)
  (evil-commentary-mode)
  #+end_src
  
  Use =evil-surround=
  #+begin_src emacs-lisp :results none
  (use-package evil-surround
     :ensure t
     :after evil
     :config
       (global-evil-surround-mode 1))
  #+end_src

* Configure =hydra=
  #+begin_src emacs-lisp :results none
  (use-package hydra
   :custom 
     (head-hint nil)
     (hydra-key-format-spec "[%s]"))
  #+end_src
  
** Agenda
#+begin_src emacs-lisp :results none
(defhydra hydra-agenda (:color blue)
  "
  ^
  ^Agenda^     
  ^────^───────────
  _a_ Agenda
  _w_ Weekly agenda
  _d_ Daily agenda
  _t_ Agenda tag view
  _h_ Agenda hot view
  ^^        
  ^^        
  "
  ("a" #'org-agenda)
  ("w" #'+agenda/weekly-agenda)
  ("d" #'+agenda/daily-agenda)
  ("t" #'+agenda/filter-by-tag)
  ("h" #'+agenda/filter-by-tag-hot))
 #+end_src
** Compile
  #+begin_src emacs-lisp :results none
  (defhydra hydra-compile (:color blue)
    "
    ──────────────────────────────
    _x_ Flycheck list errors
    _c_ Compile
    _C_ Recompile
    ^^        
    "
    ("x" #'flycheck-list-errors)
    ("c" #'compile)
    ("C" #'recompile))
  #+end_src
** Dired
  #+begin_src emacs-lisp :results none
  (defhydra hydra-dired-bookmarks (:color blue)
    "
    ──────────────────────────────
    _s_ ~/studies
    _S_ ~/scripts
    _d_ ~/Downloads
    _D_ ~/Dropbox
    _t_ ~/codeheroes/research-repo/thesis
    _w_ ~/codeheroes/chatbotize
    ^^        
    "
    ("s" (lambda () (interactive) (dired "~/studies")))
    ("S" (lambda () (interactive) (dired "~/scripts")))
    ("d" (lambda () (interactive) (dired "~/Downloads")))
    ("D" (lambda () (interactive) (dired "~/Dropbox")))
    ("t" (lambda () (interactive) (dired "~/codeheroes/research-repo/thesis")))
    ("w" (lambda () (interactive) (dired "~/codeheroes/chatbotize"))))
  #+end_src
** File 
#+begin_src emacs-lisp :results none
(defhydra hydra-file (:color blue)
  "
      ^
      ^File^     
      ^────^──────────────────────────────────────────────────────────
      _f_ Find                             _e_ resources.org
      _r_ Recent                           _i_ inbox.org
      _d_ dotfiles                         _p_ private.org
      _c_ Config                           _s_ studies.org
      _t_ Theme                            _w_ work.org
      _x_ XMonad
      ^^        
      ^^        
      "
  ("f" #'counsel-find-file)
  ("r" #'counsel-recentf)
  ("i" (lambda () (interactive)(find-file "~/Dropbox/org/todo/inbox.org")))
  ("w" (lambda () (interactive)(find-file "~/Dropbox/org/todo/work.org")))
  ("p" (lambda () (interactive)(find-file "~/Dropbox/org/todo/private.org")))
  ("e" (lambda () (interactive)(find-file "~/Dropbox/org/resources/resources.org")))
  ("s" (lambda () (interactive)(find-file "~/Dropbox/org/todo/studies.org")))
  ("d" (lambda () (interactive)(dired "~/dotfiles")))
  ("c" (lambda () (interactive)(find-file "~/my-emacs/configuration.org")))
  ("t" (lambda () (interactive)(find-file "~/my-emacs/themes/noctilux-theme.el")))
  ("x" (lambda () (interactive)(find-file "~/.xmonad/xmonad.hs"))))
  #+end_src

** Project 
#+begin_src emacs-lisp :results none
(defhydra hydra-project (:color blue)
  "
    ^
    ^Project^     
    ^────^───────────
    _a_ Add project
    _c_ Compile project
    _C_ Recompile project
    _p_ Switch project
    _f_ Find project file
    _i_ Invalidate project cache
    _t_ Add current project to treemacs
    _s_ Save project files
    ^^        
    ^^        
    "
  ("a" #'projectile-add-known-project)
  ("c" #'projectile-compile-project)
  ("C" #'projectile-repeat-last-command)
  ("f" (lambda () (interactive) (counsel-projectile-ag "--nonumbers")))
  ("p" #'counsel-projectile-switch-project)
  ("i" #'projectile-invalidate-cache)
  ("t" #'treemacs-add-and-display-current-project)
  ("s" #'projectile-save-project-buffers)
  ("w" #'+projectile/search-word-under-cursor))
#+end_src

** Buffer
#+begin_src emacs-lisp :results none
(defhydra hydra-buffer (:color blue)
  "
    ^
    ^Buffer^     
    ^──────^───────────────
    _b_ Ivy switch buffer
    _c_ Open *compilation* buffer
    _n_ Next buffer
    _N_ New buffer
    _k_ Kill buffer
    _p_ Previous buffer
    ^^        
    ^^        
    "
  ("b" #'ivy-switch-buffer)
  ("c" (lambda () (interactive) (switch-to-buffer "*compilation*")))
  ("n" #'next-buffer)
  ("N" #'+core/empty-buffer)
  ("p" #'previous-buffer)
  ("k" #'kill-current-buffer))
#+end_src

** Git 
   #+begin_src emacs-lisp :results none
     (defhydra hydra-forge (:color blue)
       "
       ^
       ^Forge^     
       ^────^───────────
       _a_ Assign reviewer
       _b_ Browse
       _c_ Create PR
       _p_ Browse PR
       ^^        
       "
       ("a" #'forge-edit-topic-review-requests)
       ("b" #'forge-browse-remote)
       ("c" #'forge-create-pullreq)
       ("p" #'forge-browse-pullreq))
   #+end_src
   
   #+begin_src emacs-lisp :results none
   (defhydra hydra-git (:color blue)
     "
     ^
     ^Git^     
     ^────^───────────
     _g_ Magit status
     _i_ Magit init
     _p_ Magit push
     _r_ Remote (forge)
     _t_ Timemachine
     ^^        
     "
     ("g" #'magit-status)
     ("i" #'magit-init)
     ("p" #'magit-push)
     ("r" #'hydra-forge/body)
     ("t" #'git-timemachine))
   #+end_src

** LSP
#+begin_src emacs-lisp :results none
  (defhydra hydra-lsp (:color blue)
    "
    ^
    ^LSP^     
    ^────^───────────
    _b_ Metals build import
    _d_ Go to type definition
    _s_ Describe session
    _e_ Error list
    _f_ Format
    _l_ Find symbol
    _t_ LSP Hydra toggle
    _r_ Find references
    _R_ Remove other workspaces
    _i_ Go to implementation
    _I_ Copy Import
    ^^        
    "
    ("b" #'lsp-metals-build-import)
    ("d" #'lsp-find-definition)
    ("s" #'lsp-describe-session)
    ("e" #'lsp-ui-flycheck-list)
    ("f" #'lsp-format-buffer)
    ("l" #'lsp-ivy-workspace-symbol)
    ("t" #'hydra-lsp-toggle/body)
    ("T" #'lsp-treemacs-errors-list)
    ("r" #'lsp-ui-peek-find-references)
    ("R" #'+lsp/remove-other-sessions)
    ("i" #'lsp-goto-implementation)
    ("I" #'+scala/copy-import))
#+end_src

#+begin_src emacs-lisp :results none
 (defhydra hydra-lsp-toggle (:color blue)
    "
    ^
    ^Toggle^     
    ^────^───────────
    _m_ iMenu
    ^^        
    "
    ("m" #'lsp-ui-imenu))
#+end_src
   
** Help
   #+begin_src emacs-lisp :results none
   (defhydra hydra-help (:color blue)
     "
     ^
     ^Help^     
     ^────^───────────
     _k_ Describe key
     _f_ Describe function
     _F_ Describe face
     _v_ Describe variable
     _p_ Describe package
     _m_ Describe mode
     _M_ Describe macro
     _e_ Message buffer
     _l_ Counsel find library
     ^^        
     ^^        
     "
     ("k" #'helpful-key)
     ("f" #'helpful-function)
     ("F" #'describe-face)
     ("v" #'helpful-variable)
     ("p" #'helpful-package)
     ("m" #'describe-mode)
     ("M" #'helpful-macro)
     ("e" #'view-echo-area-messages)
     ("l" #'counsel-find-library))
   #+end_src
   
** Open
#+begin_src emacs-lisp :results none
(defhydra hydra-open (:color blue)
   "
   ^
   ^Open^     
   ^────^───────────
   _p_ Treemacs
   _e_ Eshell
   _E_ Eshell Open In Default
   _o_ Olivetti
   ^^        
   ^^        
   "
   ("p" #'treemacs)
   ("e" #'eshell)
   ("E" #'+eshell/open-in-default)
   ("o" #'porcupine/focus-mode))
 #+end_src

** Search
#+begin_src emacs-lisp :results none
 (defhydra hydra-search (:color blue)
   "
   ^
   ^Search^     
   ^────^───────────
   _i_ Counsel iMenu
   _m_ Monorepo Counsel Rg
   _f_ Monorepo Counsel Find File
   _s_ Surround 
   ^^        
   "
   ("i" #'counsel-imenu)
   ("m" #'+work/counsel-monorepo)
   ("f" #'+work/counsel-find-file-monorepo)
   ("s" #'hydra-surround/body))
 #+end_src
 
#+begin_src emacs-lisp :results none
 (defhydra hydra-surround (:color blue)
   "
   ^
   ^Surround^     
   ^────^───────────
   _l_ List
   _o_ Option
   _i_ IO
   _f_ Future
   ^^        
   "
   ("l" #'+scala/surround-word-with-list)
   ("o" #'+scala/surround-word-with-option)
   ("i" #'+scala/surround-word-with-io)
   ("f" #'+scala/surround-word-with-future))
 #+end_src
 
** Workspace
 #+begin_src emacs-lisp :results none 
 (defhydra hydra-workspace (:color blue)
   "
   ^
   ^Workspace^     
   ^─────────^───────────
   _c_ Create workspace
   _d_ Kill workspace
   _n_ Create named workspace
   _k_ Kill workspace
   _r_ Rename workspace
   ^^        
   ^^        
   "
   ("c" #'persp-switch)
   ("d" #'persp-kill)
   ("n" (lambda () (interactive) (persp-switch (generate-new-buffer-name "workspace"))))
   ("k" #'persp-kill)
   ("r" #'persp-rename))
 #+end_src
** Window
#+begin_src emacs-lisp :results none
  (defhydra hydra-window (:color blue)
    "
    ^ 
    _u_ Winner undu
    _r_ Winner redo
    _f_ Floating window
    _j_ Regular window at bottom 
    _l_ Regular window on right
    ^^
    ^^ 
    "
    ("u" #'winner-undo)
    ("r" #'winner-redo)
    ("f" #'+core/to-floating-frame)
    ("l" #'+core/to-regular-right-window)
    ("j" #'+core/to-regular-bottom-window))
#+end_src
** Resize
#+begin_src emacs-lisp :results none
 (defhydra hydra-resize (:color blue)
   "
   ^
   ^Resize^     
   ^────^───────────
   _h_ evil-window-decrease-width
   _l_ evil-window-increase-width
   ^^        
   "
   ("h" #'evil-window-decrease-width)
   ("l" #'evil-window-increase-width))
 #+end_src

* Global keybindings 
Buffer commands.
#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-x C-x") #'save-buffer)
(global-set-key (kbd "C-x C-b") #'ibuffer)
(global-set-key (kbd "C-c b n") #'next-buffer)
(global-set-key (kbd "C-c b p") #'previous-buffer)
#+end_src


Evaluation commancs.
#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-c e b") #'eval-buffer)
#+end_src


Dired jump.
#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-x C-j") 'dired-jump)
#+end_src

Toggle line truncation.
#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-x w") 'toggle-truncate-lines)
#+end_src

Easier movements between splits.
#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-h") #'evil-window-left)
(global-set-key (kbd "C-j") #'evil-window-down)
(global-set-key (kbd "C-k") #'evil-window-up)
(global-set-key (kbd "C-l") #'evil-window-right)
#+end_src

Only window.
#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-c o") #'delete-other-windows)
#+end_src

Winner mode.
#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-c h") #'winner-undo)
(global-set-key (kbd "C-c l") #'winner-redo)
#+end_src

Vim-like screen jumping.
#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-u") #'evil-scroll-up)
#+end_src

Use "C-w d" to close a window.
#+begin_src emacs-lisp :results none
(define-key evil-window-map (kbd "d") #'evil-window-delete)
#+end_src

Use =zoom-window=.
#+begin_src emacs-lisp :results none
(define-key evil-window-map (kbd "o") #'zoom-window-zoom)
(define-key evil-window-map (kbd "C-o") #'zoom-window-zoom)
#+end_src

Use =org-capture=.
#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-c c") #'org-capture)
#+end_src

Scale text.
#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-+") #'text-scale-increase)
(global-set-key (kbd "C--") #'text-scale-decrease)
#+end_src
  
* Misc Functions
 #+begin_src emacs-lisp :results none
(defun +core/empty-buffer () 
   (interactive)
   (switch-to-buffer (generate-new-buffer "empty")))
 #+end_src
 
 #+begin_src emacs-lisp :results none
(defun +core/copy-file-path ()
  (interactive)
  (kill-new (buffer-file-name)))
 #+end_src
 
 #+begin_src emacs-lisp :results none
 (defun +core/reload-theme ()
    (interactive)
    (let ((theme (-first-item custom-enabled-themes)))
       (load-theme theme t)))
 #+end_src
 
 Search Monorepo.
 #+begin_src emacs-lisp :results none
(defun +work/counsel-monorepo ()
  (interactive)
  (counsel-rg "" "/home/porcupine/codeheroes/chatbotize/monorepo" "--iglob !*.lock"))

(defun +work/counsel-find-file-monorepo ()
  (interactive)
  (counsel-git))
 #+end_src
 
 Based on excelent [[https://protesilaos.com/dotemacs/#h:0077f7e0-409f-4645-a040-018ee9b5b2f2][LINK]]
 #+begin_src emacs-lisp :results none
   (defun +core/to-floating-frame()
     (interactive)
     (delete-window)
     (make-frame '((name . "floating")
                   (window-system . x)
                   (minibuffer . nil))))

    (defun +core/to-regular-bottom-window()
       (interactive)
       (+core/to-regular-window `bottom))

   (defun +core/to-regular-right-window()
      (interactive)
      (+core/to-regular-window `right))

    (defun +core/to-regular-window(position)
      (let ((buffer (current-buffer)))
        (with-current-buffer buffer
          (delete-window)
          (pcase position
            (`bottom (display-buffer-at-bottom buffer nil))
            (`right (display-buffer-in-direction buffer '((direction . right))))))))
 #+end_src
  
  #+begin_src emacs-lisp :results none
 (defun +core/surround-word-with (left right)
   (backward-to-word 1)
   (forward-to-word 1)
   (kill-word 1)
   (insert left)
   (yank)
   (insert right))
  #+end_src

* Configure =which-key=
  #+begin_src emacs-lisp :results none
    (use-package which-key
      :ensure t
      :defer t
      :init (which-key-mode))
  #+end_src
  
* Configure =avy= / =evil-easymotion= / =evil-snipe=
  #+begin_src emacs-lisp :results none
  (use-package avy 
    :defer t)
    
  (use-package evil-easymotion
    :defer t)
  #+end_src
  
  #+begin_src emacs-lisp :results none
  (define-key evil-motion-state-map (kbd "g s k") #'evilem-motion-previous-line)
  (define-key evil-motion-state-map (kbd "g s j") #'evilem-motion-next-line)
  (define-key evil-motion-state-map (kbd "g s f") #'evil-avy-goto-char)
  (define-key evil-motion-state-map (kbd "g s s") #'evil-avy-goto-char-2)
  #+end_src

  Use =evil-snipe=
  #+begin_src emacs-lisp :results none
  (use-package evil-snipe 
     :after evil)
     
  ;;(require 'evil-snipe)
  #+end_src
  
* Configure =perspecitve=
Use [[https://github.com/nex3/perspective-el][perspective]] to manage workspaces.
#+begin_src emacs-lisp :results none
  (use-package perspective 
    :defer 5
    :init
      (persp-mode)
    :config 
      (define-key evil-normal-state-map (kbd "gt") #'persp-next)
      (define-key evil-normal-state-map (kbd "gT") #'persp-prev))
#+end_src

* Configure =ivy= / =counsel= / =swiper=
  Default =ivy= configuration.
  #+begin_src emacs-lisp :results none
    (use-package ivy
       :config
         (setq ivy-use-virtual-buffers t)
         (setq ivy-initial-inputs-alist nil)
         (setq enable-recursive-minibuffers t)
         (setq search-default-mode #'char-fold-to-regexp)
         (ivy-mode 1)
         (global-set-key (kbd "C-c C-r") 'ivy-resume)
         (global-set-key (kbd "<f6>") 'ivy-resume))

    (use-package swiper
      :after ivy
      :config
        (global-set-key "\C-s" 'swiper))

    (use-package counsel 
      :after ivy
      :config
        (global-set-key (kbd "M-x") 'counsel-M-x)
        (global-set-key (kbd "C-x C-f") 'counsel-find-file)
        (global-set-key (kbd "C-c g") 'counsel-git)
        (global-set-key (kbd "C-c j") 'counsel-git-grep)
        (global-set-key (kbd "C-c k") 'counsel-ag)
        (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))

    ;; sorts counsel-M-x by recently used
    (use-package smex :after counsel)
  #+end_src
  
  Recentf configuration.
  #+begin_src emacs-lisp :results none
  (setq recentf-max-saved-items 200)
  #+end_src
  
 #+begin_src emacs-lisp :results none
(use-package ivy-posframe
  :ensure
  :after ivy
  :config
  (setq ivy-posframe-parameters
        '((no-accept-focus . t)
          (left-fringe . 2)
          (right-fringe . 2)
          (internal-border-width . 2)))

  ;; (setq ivy-posframe-display-functions-alist
  ;;       '((complete-symbol . ivy-posframe-display-at-point)
  ;;         (swiper . ivy-display-function-fallback)
  ;;         (t . ivy-posframe-display-at-frame-center)))

  (setq ivy-posframe-display-functions-alist
      '((complete-symbol . ivy-posframe-display-at-point)
        (t . ivy-display-function-fallback)))
        (ivy-posframe-mode 1))
  #+end_src
* Configure =flycheck=
  #+begin_src emacs-lisp :results none
    (use-package flycheck
      :defer t
      :init (global-flycheck-mode)
      :bind (:map evil-normal-state-map 
            ("[ e" . flycheck-previous-error)
            ("] e" . flycheck-next-error))

      :config 
        (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
  #+end_src
* Configure =org=
** Core
#+begin_src emacs-lisp :results none
(use-package org
  :ensure org-plus-contrib
  :config 
  (require 'org-tempo)

  (setq org-fontify-done-headline t)
  (setq org-use-fast-todo-selection 'expert)

  (setq org-todo-keywords
	'((sequence "TODO(t)" "PROJECT(p)" "STRT(s)" "SOMEDAY(S)" "WAIT(w)" "|" "DONE(d!)" "KILL(k)")
          (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")))

  (evil-collection-define-key 'normal 'org-mode-map
    (kbd "C-k") 'evil-window-up
    (kbd "C-j") 'evil-window-down)

  :bind
  (:map evil-normal-state-map
	("C-k" . evil-window-up)
	("C-j" . evil-window-down)
	("RET" . +org/dwim))
  :hook (org-mode . org-indent-mode))
#+end_src

#+begin_src emacs-lisp :results none
(use-package org-bullets
   :after org
   :hook (org-mode . org-bullets-mode))
#+end_src
  
Do not ask whether it is save to evaluate a snippet of code.
#+begin_src emacs-lisp :results none 
(setq org-confirm-babel-evaluate nil)
#+end_src

Enlarge LaTeX font.
#+begin_src emacs-lisp :results none
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
#+end_src

Automatically save archive buffer after archiving a task.
#+begin_src emacs-lisp :results none
(defun org-archive-save-buffer ()
  (let ((afile (car (org-all-archive-files))))
    (if (file-exists-p afile)
      (let ((buffer (find-file-noselect afile)))
          (with-current-buffer buffer
            (save-buffer)))
      (message "Ooops ... (%s) does not exist." afile))))

(add-hook 'org-archive-hook 'org-archive-save-buffer)
#+end_src
 
Org tag placement.
#+begin_src emacs-lisp :results none
(setq org-tags-column -1)
#+end_src

** Org Agenda 
#+begin_src emacs-lisp :results none
 (use-package evil-org
 :ensure t
 :after org
 :config
 (add-hook 'org-mode-hook 'evil-org-mode)
 (add-hook 'evil-org-mode-hook
(lambda ()
(evil-org-set-key-theme)))
 (require 'evil-org-agenda)
 (evil-org-agenda-set-keys))
#+end_src

#+begin_src emacs-lisp :results none
(setq org-agenda-files '(
   "~/Dropbox/org/todo/private.org"
   "~/Dropbox/org/todo/studies.org"
   "~/Dropbox/org/todo/work.org"))
#+end_src

#+begin_src emacs-lisp :results none
(defun +org-agenda/created-today-group (item)
  (let* ((marker (get-text-property 0 'org-marker item))
         (property (org-entry-get marker "CreatedAt")))
    property))

(use-package org-super-agenda
  :hook (org-agenda-mode . org-super-agenda-mode)
  :config
    (setq org-super-agenda-groups
      '(
        ;; (:name "Today" :and (:time-grid t :not (:pred +org-agenda/created-today-group)))
        (:name "Today" :and (:time-grid t))
        ;; (:name "Added today" :pred +org-agenda/created-today-group)
        (:name "Hot" :tag "@hot")
        (:name "Habits" :habit t))))
#+end_src

#+begin_src emacs-lisp :results none
(defun +agenda/weekly-agenda ()
  (interactive)
  (org-agenda nil "a"))
  
(defun +agenda/daily-agenda ()
  (interactive)
  (let ((org-agenda-span 1))
    (org-agenda nil "a")))

(defun +agenda/filter-by-tag ()
  (interactive)
  (org-tags-view t nil))

(defun +agenda/filter-by-tag-hot ()
  (interactive)
  (org-tags-view t "@hot"))
#+end_src
** Academic
#+begin_src emacs-lisp :results none
(use-package org-ref :defer t)
#+end_src
 
#+begin_src emacs-lisp :results none
(use-package academic-phrases :defer t)
#+end_src
   
** Org Capture
#+begin_src emacs-lisp :results none
(setq org-default-notes-file (concat org-directory "~/Dropbox/org/todo/notes.org"))

(setq org-capture-templates
      '(("i" "Inbox" entry (file "~/Dropbox/org/todo/inbox.org")
         "* TODO %?
:PROPERTIES:
:CreatedAt: %T
:END:\n" )
        ("s" "Studies" entry (file "~/Dropbox/org/todo/studies.org")
         "* TODO %?
:PROPERTIES:
:CreatedAt: %T
:END:\n")
        ("m" "Master" entry (file+headline "~/Dropbox/org/todo/studies.org" "Master Thesis")
         "* TODO %?
:PROPERTIES:
:CreatedAt: %T
:END:\n" )
        ("p" "Private" entry (file "~/Dropbox/org/todo/private.org")
         "* TODO %?
:PROPERTIES:
:CreatedAt: %T
:END:\n" )
        ("w" "Work" entry (file "~/Dropbox/org/todo/work.org")
         "* TODO %?
:PROPERTIES:
:CreatedAt: %T
:END:\n" )))
#+end_src

** Org Babel
#+begin_src emacs-lisp :results none
(use-package ob-ammonite
  :ensure t
  :defer t)
#+end_src

#+begin_src emacs-lisp :results none
(use-package ob-ipython
  :ensure t
  :defer t)
#+end_src

Load languages.
#+begin_src emacs-lisp :results none
(org-babel-do-load-languages 'org-babel-load-languages
 '((shell . t)
   (emacs-lisp . t)
   ;; (ipython . t)
   (python . t)
   (ammonite . t)
   (jupyter . t)
   (haskell . t)))
#+end_src

Fix tab indentation in source blocks.
#+begin_src emacs-lisp :results none
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-src-preserve-indentation t)
#+end_src

Setup images.
#+begin_src emacs-lisp :results none
(setq org-startup-with-inline-images t)

(add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
#+end_src

Change the image background. 
#+begin_src emacs-lisp :results none
(defun create-image-with-background-color (args)
  "Specify background color of Org-mode inline image through modify `ARGS'."
  (let* ((file (car args))
         (type (cadr args))
         (data-p (caddr args))
         (props (cdddr args)))
    ;; get this return result style from `create-image'
    (append (list file type data-p)
            (list :background  "#F0E68C")
            props)))

(advice-add 'create-image :filter-args
            #'create-image-with-background-color)
#+end_src

** Org Roam
#+begin_src emacs-lisp :results none
(use-package org-roam
      :ensure t
      :hook (after-init-hook . org-roam-mode)
      :bind (:map org-roam-mode-map
              (("C-c n l" . org-roam)
               ("C-c n f" . org-roam-find-file)
               ("C-c n g" . org-roam-graph-show))
              :map org-mode-map
              (("C-c n i" . org-roam-insert))
              (("C-c n I" . org-roam-insert-immediate)))
      :config 
        (setq org-roam-directory "/home/porcupine/Dropbox/org-roam")
        (setq org-roam-graph-viewer "/usr/bin/brave-browser")
        (require 'org-roam-protocol))
#+end_src

** Functions
#+begin_src emacs-lisp :results none
(defun +org/dwim ()
  (interactive)
  (let* ((context (org-element-context))
         (type (org-element-type context)))

    (pcase type
      (`headline
       (let ((todo-keyword (org-element-property :todo-keyword context)))
	 (pcase todo-keyword
	   (`"[ ]" (org-todo "[-]"))
	   (`"[-]" (org-todo "[X]"))
	   (`nil (message "+org/dwim - ignore"))
           (default (org-todo)))))
      (`link
       (org-open-at-point)))))
#+end_src

* Configure =yasnippet=
  #+begin_src emacs-lisp :results none
  (use-package yasnippet
    :defer 5
    :config 
      (yas-global-mode))
  #+end_src
  
* Configure =projectile=
 #+begin_src emacs-lisp :results none
   (use-package projectile 
     :ensure t
     :defer t
     :config
       (projectile-global-mode)
       (setq projectile-project-search-path '("~/codeheroes/chatbotize/monorepo"))
       (setq projectile-enable-caching t)
       (setq projectile-project-root-files-functions #'(projectile-root-top-down
                                                          projectile-root-top-down-recurring
                                                          projectile-root-bottom-up
                                                          projectile-root-local))

       ;; (setq projectile-project-root-files-functions #'(projectile-root-bottom-up))

       ;; TODO: think whether this one is needed
       (projectile-register-project-type 'scala '("build.sbt")))

   (use-package counsel-projectile
      :after projectile) 
 #+end_src
 
#+begin_src emacs-lisp :results none
(defun +projectile/search-word-under-cursor ()
  (interactive)
  (let ((counsel-projectile-ag-initial-input (current-word)))
    (counsel-projectile-ag)))
#+end_src

* Configure =magit=
 #+begin_src emacs-lisp :results none
 (use-package magit :defer t)
 (use-package evil-magit :after magit)
 (use-package forge :after magit)
 #+end_src
 
 vc-annotate options.
 #+begin_src emacs-lisp :results none
;; (setq vc-git-annotate-switches '("-c"))
 #+end_src

* Configure =git-timemachine=
 #+begin_src emacs-lisp :results none
  (use-package git-timemachine 
    :ensure t
    :defer t)
 #+end_src

* Configure =treemacs=
#+begin_src emacs-lisp :results none
   (use-package treemacs 
      :ensure t
      :defer t
      :config 
        (define-key treemacs-mode-map (kbd "SPC o p") #'treemacs)
        (setq treemacs-width 60))

   (use-package treemacs-evil
     :after treemacs 
     :bind (:map evil-treemacs-state-map 
           ("SPC u" . #'universal-argument))
     :config
       (define-key evil-treemacs-state-map (kbd "SPC o p") #'treemacs))

   (use-package treemacs-projectile
     :after treemacs)
#+end_src

#+begin_src emacs-lisp :results none
(defun +treemacs/add-current-project-as-only ()
  (interactive)
  (-each (treemacs-workspace->projects (treemacs-current-workspace))
    #'treemacs-do-remove-project-from-workspace)
  (treemacs-add-and-display-current-project))
#+end_src

* Configure =doom-modeline=
#+begin_src emacs-lisp :results none
(use-package doom-modeline
  :ensure t 
  :config 
    (setq doom-modeline-height 35)
    (setq doom-modeline-vcs-max-length 40)
    (setq doom-modeline-enable-word-count t)
    (set-face-attribute 'mode-line nil :height 115)
    (doom-modeline-mode))
#+end_src
* Configure =zoom-window=
 #+begin_src emacs-lisp :results none
   (use-package zoom-window 
      :ensure t
      :defer t
      :config
        (custom-set-variables
          '(zoom-window-mode-line-color "#4682B4")))
 #+end_src
* Configure =company=
  #+begin_src emacs-lisp :results none
  (use-package company
    :defer t
    :config
      (global-company-mode 1)
      (with-eval-after-load 'company
          (define-key company-mode-map (kbd "C-<space>") #'company-complete)
          (define-key company-active-map (kbd "<return>") #'company-complete-selection)
          (define-key company-active-map (kbd "<tab>") #'company-complete-common)
          (define-key company-active-map (kbd "TAB") #'company-complete-common))
      (setq company-backends '(company-lsp company-capf company-yasnippet company-dabbrev company-elisp))
      (setq company-dabbrev-downcase nil))
  #+end_src
* Configure =helpful=
 #+begin_src emacs-lisp :results none
 (use-package helpful :defer t)
 #+end_src

* Configure =keychain=
  #+begin_src emacs-lisp :results none
  (use-package keychain-environment
     :ensure t
     :defer 5
     :config (keychain-refresh-environment))
  #+end_src

* Configure =ox-reveal=
#+begin_src emacs-lisp :results none
(use-package ox-reveal
  :defer t)
  
(use-package org-re-reveal
  :defer t)
#+end_src

* Configure =jupyter=
#+begin_src emacs-lisp :results none
(use-package jupyter
  :defer t)
#+end_src

* Configure =emojify=
defer?
#+begin_src emacs-lisp :results none
(use-package emojify 
   :ensure t
   :config
     (set-fontset-font t 'unicode " Noto Color Emoji" nil 'prepend))
#+end_src

* Configure =dired=
#+begin_src emacs-lisp :results none
  (defun +dired/open-externally ()
    (interactive)
     
    (call-process "xdg-open" nil 0 nil (dired-get-filename)))
    ;; (call-process "zathura" nil 0 nil (dired-get-filename))

  (evil-collection-define-key 'normal 'dired-mode-map
    "ge" #'+dired/open-externally
    "'" #'hydra-dired-bookmarks/body)
#+end_src

#+begin_src emacs-lisp :results none
  (use-package dired-subtree
    :ensure t
    :after dired
    :bind (:map dired-mode-map
                ("<tab>" . dired-subtree-toggle)
                ("<C-tab>" . dired-subtree-cycle)
                ("<backtab>" . dired-subtree-remove)))

  (setq dired-listing-switches "-alh")
#+end_src
* Configure =ediff=
#+begin_src emacs-lisp :results none
(use-package ediff
  :ensure t 
  :defer t
  :config
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-forward-word-function 'forward-char))
#+end_src

* Languages
** Common
#+begin_src emacs-lisp :results none
(defface todo-comment-face
  '((t :foreground "#ff5555"
       :weight bold
       :underline t
       ))
  "TODO Comment Face")
#+end_src

** Dockerfile
#+begin_src emacs-lisp :results none
(use-package dockerfile-mode
  :defer t
  :config
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+end_src
** Python
Setup =python-mode=.
#+begin_src emacs-lisp :results none
(use-package python-mode
   :ensure t
   :defer t)

;; (setq
;;   python-shell-interpreter "ipython"
;;   python-shell-interpreter-args "-i")
#+end_src
   
#+begin_src emacs-lisp :results none
(use-package pyenv-mode
  :after python-mode
  :hook (python-mode . pyenv-mode)
  :config
    (let ((pyenv-path (expand-file-name "~/.pyenv/bin")))
         (setenv "PATH" (concat pyenv-path ":" (getenv "PATH")))
         (add-to-list 'exec-path pyenv-path)))

(use-package pyvenv
  :ensure t
  :after pyenv-mode
  :hook (pyenv-mode . pyvenv-mode))
#+end_src

#+begin_src emacs-lisp :results none
(defun +pyvenv/set-to-pyenv ()
  (interactive)
  (pyvenv-activate
     (pyenv-mode-full-path (pyenv-mode-version))))
#+end_src

#+begin_src emacs-lisp :results none
(use-package blacken
  :after python-mode
  :hook (python-mode . blacken-mode))
#+end_src

#+begin_src emacs-lisp :results none
(use-package lsp-python-ms
  :ensure t
  :after python-mode
  :init (setq lsp-python-ms-auto-install-server t)
  :hook (
         (python-mode . lsp-deferred)
         (python-mode . (lambda ()
                          ;; (setq lsp-python-ms-extra-paths '())
                          (require 'lsp-python-ms)))))
#+end_src


#+begin_src emacs-lisp :results none
(font-lock-add-keywords 'python-mode
 '(("\\(TODO\\):" 1 'todo-comment-face prepend)))
#+end_src

** Scala
scala-mode
#+begin_src emacs-lisp :results none
  (use-package scala-mode
    :ensure t
    :mode "\\.s\\(cala\\|bt\\)$")
#+end_src

sbt-mode
#+begin_src emacs-lisp :results none
  (use-package sbt-mode
    :after scala-mode
    :commands sbt-start sbt-command
    :config
      (substitute-key-definition
         'minibuffer-complete-word
         'self-insert-command
          minibuffer-local-completion-map)

      (setq sbt:program-options '("-Dsbt.supershell=false")))
#+end_src

#+begin_src emacs-lisp :results none
(defun +scala/copy-import ()
    (interactive)
    (setq import
      (replace-regexp-in-string "package" "import"
      (concat
        (car (split-string (buffer-string) "\n"))
        "."
        (thing-at-point 'word))))

    (message "Copied: %s" import)
    (kill-new import))
#+end_src

#+begin_src emacs-lisp :results none
(defun +scala/surround-word-with-list ()
  (interactive)
  (+core/surround-word-with "List[" "]"))
  
(defun +scala/surround-word-with-option ()
  (interactive)
  (+core/surround-word-with "Option[" "]"))
  
(defun +scala/surround-word-with-future ()
  (interactive)
  (+core/surround-word-with "Future[" "]"))
  
(defun +scala/surround-word-with-io ()
  (interactive)
  (+core/surround-word-with "IO[" "]"))
#+end_src

TODO colors.
#+begin_src emacs-lisp :results none
(font-lock-add-keywords 'scala-mode
 '(("\\(TODO\\):" 1 'todo-comment-face prepend)))
#+end_src

** Protobuf
   #+begin_src emacs-lisp :results none
   (use-package protobuf-mode
     :ensure t 
     :defer t)
   
   (defconst my-protobuf-style
     '((c-basic-offset . 4)
      (indent-tabs-mode . nil)))

    (add-hook 'protobuf-mode-hook 
      (lambda () (c-add-style "my-style" my-protobuf-style t)))
   #+end_src
   
** LSP
#+begin_src emacs-lisp :results none
  (use-package lsp-mode
   :hook ((scala-mode . lsp)
          (sh-mode . lsp-deferred))
   :config
         (setq lsp-prefer-flymake nil)
   :bind (:map evil-normal-state-map 
         ("M-w" . +lsp-ui/toggle-doc-focus)          
         ("C-<return>" . lsp-execute-code-action)))
#+end_src

#+begin_src emacs-lisp :results none
(use-package lsp-ui
  :after lsp-mode
  :config 
    (setq lsp-ui-doc-use-childframe nil)
    (add-to-list 'lsp-ui-doc-frame-parameters '(no-accept-focus . t)))
#+end_src

#+begin_src emacs-lisp :results none
(use-package lsp-metals :after lsp-mode scala-mode)
#+end_src

Use =lsp-ivy=.
#+begin_src emacs-lisp :results none
(use-package lsp-ivy
  :after lsp-mode
  :commands lsp-ivy-workspace-symbol)
#+end_src

#+begin_src emacs-lisp :results none
(use-package company-lsp
  :after lsp-mode company
  :custom
   (company-lsp-cache-candidates t)
   (company-lsp-async t)
   (company-lsp-enable-snippet t)
   (company-lsp-enable-recompletion t)
  :commands company-lsp)
#+end_src

#+begin_src emacs-lisp :results none
(defun +lsp-ui/toggle-doc-focus ()
  (interactive)
  (if (lsp-ui-doc--visible-p)
      (lsp-ui-doc-focus-frame)
      (lsp-ui-doc-unfocus-frame)))
#+end_src

Remove other LSP sessions.
#+begin_src emacs-lisp :results none
(defun +lsp/remove-other-sessions ()
    (interactive)
    (-each 
        (-remove-item
            (lsp-find-session-folder (lsp-session) default-directory)
            (lsp-session-folders (lsp-session)))
        #'lsp-workspace-folders-remove))
#+end_src
   
** Yaml
#+begin_src emacs-lisp :results none
(use-package yaml-mode 
  :defer t)
#+end_src

** SQL
#+begin_src emacs-lisp :results none
(defun +sql/align ()
  (interactive)
  (let ((rule
	 (list (list nil
		     (cons 'regexp  "\\(\\s-*\\)\\(VARCHAR\\|NOT NULL\\|TIMESTAMP\\)")
		     (cons 'group 1)
		     (cons 'bogus nil)
		     (cons 'spacing 3)
		     (cons 'repeat t)))))
    (align-region (region-beginning) (region-end) 'entire rule nil nil)))
#+end_src

** Elisp
#+begin_src emacs-lisp :results none
  (defun sm-greek-lambda ()
      (font-lock-add-keywords nil `(("\\<lambda\\>"
          (0 (progn (compose-region (match-beginning 0) (match-end 0)
          ,(make-char 'greek-iso8859-7 107))
          nil))))))

  (add-hook 'emacs-lisp-mode-hook 'sm-greek-lambda)
#+end_src

** Haskell
#+begin_src emacs-lisp :results none
(use-package haskell-mode
  :ensure t
  :defer t
  :config
  (flycheck-haskell-setup))
#+end_src


#+begin_src emacs-lisp :results none
(use-package flycheck-haskell
  :commands flycheck-haskell-setup)
#+end_src

** ReasonML
#+begin_src emacs-lisp :results none
(use-package reason-mode
  :ensure t
  :mode "\\.rei?$"
  :config 
  (require 'lsp-mode)
  (setq lsp-response-timeout 180)
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection "/home/porcupine/tool/reason-language-server")
                    :major-modes '(reason-mode)
                    :notification-handlers (ht ("client/registerCapability" 'ignore))
                    :priority 1
                    :server-id 'reason-ls)))
#+end_src

* Configure =Info=
#+begin_src emacs-lisp :results none
  (use-package info
    :defer t)
    ;; :bind (:map evil-normal-state-map
    ;;   ("RET" . 'Info-follow-nearest-node)))
#+end_src

* Configure =smarparens=
#+begin_src emacs-lisp :results none
(use-package smartparens
  :ensure t
  :config
    (require 'smartparens-config)
    (smartparens-global-mode t)
    (smartparens-global-strict-mode t)
    (show-smartparens-global-mode t)
  :bind (:map smartparens-mode-map
    ("M-l" . sp-forward-slurp-sexp)
    ("M-h" . sp-forward-barf-sexp)
    ("M-S-l" . sp-backward-slurp-sexp)
    ("M-S-h" . sp-backward-barf-sexp)))

(use-package evil-smartparens
  :ensure t
  :after smartparens
  :hook (smartparens-mode . evil-smartparens-mode))

(define-key global-map (kbd "<M-l>") nil)

(smartparens-mode)
#+end_src

* Configure =csv-mode=
#+begin_src emacs-lisp :results none
(use-package csv-mode
  :ensure t
  :defer t)
#+end_src

* Configure =eshell=
#+begin_src emacs-lisp :results none
(defun +eshell/clear ()
   (interactive)
   (eshell/clear 1)
   (eshell-send-input)
   (evil-insert nil))

(defun +eshell/open-in-default ()
  (interactive)
  (let ((current-dir default-directory))
    (eshell)
    (eshell/cd current-dir)
    (+eshell/clear)))
#+end_src

#+begin_src emacs-lisp :results none
(use-package eshell
   :defer t
   :bind (:map eshell-mode-map
          ("C-l" . +eshell/clear)))
#+end_src

* Configure =elfeed=
  #+begin_src emacs-lisp :results none
    (use-package elfeed
      :defer t
      :custom
        (elfeed-search-remain-on-entry t)
      :config
        (setq elfeed-feeds 
              '(("https://michalplachta.com/feed.xml")
                ("https://www.youtube.com/feeds/videos.xml?channel_id=UC6fXiuFCWAnVPwRhBMztLlQ" youtube) ;; Leeren
                ("https://degoes.net/feed.xml")
                ("https://blog.softwaremill.com/feed")
                ("https://sachachua.com/blog/feed" emacs)
                ))
        (setq-default elfeed-search-filter "@6-months-ago +unread")

        (evil-collection-define-key 'normal 'elfeed-search-mode-map
          (kbd "RET") '+elfeed/show-entry
          "b" '+elfeed/browse-url
          "G" 'elfeed-update))

    ;; (use-package elfeed-goodies
    ;;   :after elfeed
    ;;   :config
    ;;     (elfeed-goodies/setup))
  #+end_src
  
  #+begin_src emacs-lisp :results none
    (defun +elfeed/show-entry (entry)
      (interactive (list (elfeed-search-selected :ignore-region)))
      (require 'elfeed-show)
      (when (elfeed-entry-p entry)
        (elfeed-search-update-entry entry)
        (unless elfeed-search-remain-on-entry (forward-line))
        (elfeed-show-entry entry)))

     (defun +elfeed/browse-url (&optional use-generic-p)
       (interactive "P")
       (let ((entries (elfeed-search-selected)))
         (cl-loop for entry in entries
                  do (elfeed-untag entry 'unread)
                  when (elfeed-entry-link entry)
                  do (if use-generic-p
                         (browse-url-generic it)
                       (browse-url it)))
         (unless (or elfeed-search-remain-on-entry (use-region-p))
           (forward-line))))
  #+end_src

* Configure =winner=
#+begin_src emacs-lisp :results none
(use-package winner
  :hook (after-init-hook . winner-mode))
#+end_src

* Configure =string-inflection=
#+begin_src emacs-lisp :results none
(use-package string-inflection 
  :ensure t
  :defer t)
#+end_src

* Configure =eval-expr=
#+begin_src emacs-lisp :results none
(use-package eval-expr
   :ensure t
   :defer t)
#+end_src

* Configure =synosaurus=
#+begin_src emacs-lisp :results none
(use-package synosaurus
  :ensure t
  :defer t)
#+end_src

* Configure =pdf-tools=
#+begin_src emacs-lisp :results none
(use-package pdf-tools
  :ensure t
  :defer t)
#+end_src

* Development
#+begin_src emacs-lisp :results none
(defun load-ejira ()
  (interactive)
  (use-package ejira
    :quelpa (ejira :fetcher github :repo "nyyManni/ejira")
    :init
    (setq jiralib2-url              "https://chatbotize.atlassian.net"
          jiralib2-auth             'token

          ejira-org-directory       "~/.jira"
          ejira-projects            '("CD")

          ejira-priorities-alist    '(("Highest" . ?A)
                                      ("High"    . ?B)
                                      ("Medium"  . ?C)
                                      ("Low" h    . ?D)
                                      ("Lowest"  . ?E))
          ejira-todo-states-alist   '(("To Do"       . 1)
                                      ("In Progress" . 2)
                                      ("Done"        . 3)))
    :config
    ;; Tries to auto-set custom fields by looking into /editmeta
    ;; of an issue and an epic.
    (add-hook 'jiralib2-post-login-hook #'ejira-guess-epic-sprint-fields)

    ;; They can also be set manually if autoconfigure is not used.
    ;; (setq ejira-sprint-field       'customfield_10001
    ;;       ejira-epic-field         'customfield_10002
    ;;       ejira-epic-summary-field 'customfield_10004)

    ;; (require 'ejira-agenda)

    ;; Make the issues visisble in your agenda by adding `ejira-org-directory'
    ;; into your `org-agenda-files'.
    ;; (add-to-list 'org-agenda-files ejira-org-directory)
    ))
#+end_src

* Configure =olivetti=
#+begin_src emacs-lisp :results none
(use-package olivetti
  :ensure t
  :defer t
  :config 
  (custom-set-variables '(olivetti-body-width 90))
  (custom-set-variables '(olivetti-recall-visual-line-mode-entry-state t)))
#+end_src


#+begin_src emacs-lisp :results none
(use-package hide-mode-line
  :ensure t 
  :defer t)
#+end_src

* Writer Mode
#+begin_src emacs-lisp :results none
(define-minor-mode porcupine/focus-mode
  "Focus mode."
  :init-value nil
  :global nil
  (if porcupine/focus-mode
      (progn
	(olivetti-mode)
	(hide-mode-line-mode))
    (olivetti-mode -1)
    (hide-mode-line-mode -1)))
#+end_src

* Playing with org-protocol
#+begin_src emacs-lisp :results none
(server-start)
(require 'org-protocol)
(require 'org-roam-protocol)
#+end_src

* TMP
#+begin_src emacs-lisp :results none
(setq truncate-lines t)
(setq-default truncate-lines t)
(setq truncate-partial-width-windows nil)
(setq-default truncate-partial-width-windows nil)
#+end_src
  
* TODO TODOs
- [ ] java script / react stuff
- [ ] workgroups.el
- [ ] if do not run a command on hydra missclick (e.g. "SPC f p" runs "p" as paste)
- [ ] anzu?
- [ ] bookmarks
- [ ] agenda
- [ ] general.el
- [ ] reimplement py-indent-or-complete
