#+STARTUP: overview

* Startup
#+begin_src emacs-lisp :results none
(defvar file-name-handler-alist-old file-name-handler-alist)

(setq package-enable-at-startup nil
      file-name-handler-alist nil
      message-log-max 16384
      gc-cons-threshold 402653184
      gc-cons-percentage 0.7
      auto-window-vscroll nil)

(add-hook 'emacs-startup-hook
          `(lambda ()
             (setq file-name-handler-alist file-name-handler-alist-old
                   gc-cons-threshold 800000
                   gc-cons-percentage 0.1)
             (message "Emacs started in: %s" (emacs-init-time))
             (garbage-collect)
             (display-battery-mode)) t)
#+end_src

* Visuals
Font.
#+begin_src emacs-lisp :results none
(set-face-attribute 'default nil :font "Noto Sans Mono-12")
(set-face-attribute 'fixed-pitch nil :font "Noto Sans Mono-12")
(set-face-attribute 'variable-pitch nil :font "Iosevka-13")
#+end_src
 
Hide all the bezels.
#+begin_src emacs-lisp :results none
(tool-bar-mode -1)
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(blink-cursor-mode -1)
(setq cursor-in-non-selected-windows nil)
#+end_src

Color theme.
#+begin_src emacs-lisp :results none
(add-to-list 'custom-theme-load-path "~/.emacs.default/themes")
(load-theme 'noctilux t)
#+end_src

#+begin_src emacs-lisp :results none
(defun toggle-cursor-visibility ()
  (interactive)
  (if (internal-show-cursor-p)
    (internal-show-cursor nil nil)
    (internal-show-cursor nil t)))
#+end_src

* Sensible settings
Disable backup and lockfiles.
#+begin_src emacs-lisp :results none
(setq make-backup-files nil)
(setq create-lockfiles nil)
#+end_src

MacOS settings
#+begin_src emacs-lisp :results none
(setq mac-option-modifier 'meta)
(setq mac-right-option-modifier nil)
#+end_src

#+begin_src emacs-lisp :results none
(setq vc-follow-symlinks t)
#+end_src

#+begin_src emacs-lisp :results none
(setq custom-file (locate-user-emacs-file "custom-vars.el"))
(load custom-file 'noerror 'nomessage)
#+end_src

#+begin_src emacs-lisp :results none
(setq use-dialog-box nil)
#+end_src

#+begin_src emacs-lisp :results none
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
(global-auto-revert-mode 1)
#+end_src

Disable saving the clipboard after exiting Emacs.
#+begin_src emacs-lisp :results none
(setq x-select-enable-clipboard-manager nil)
#+end_src

Convert tabs to spaces.
#+begin_src emacs-lisp :results none
(setq tab-width 2)
(setq indent-tabs-mode nil)
#+end_src

Ask before closing Emacs.
#+begin_src emacs-lisp :results none
(setq confirm-kill-emacs 'y-or-n-p)
#+end_src

#+begin_src emacs-lisp :results none
(setq bookmark-save-flag 1)
#+end_src

#+begin_src emacs-lisp :results none
(setq require-final-newline nil)
#+end_src

Use colors in compilation buffer. defer?
#+begin_src emacs-lisp :results none
(defun colorize-compilation-buffer ()
  (require 'ansi-color)
  (ansi-color-apply-on-region compilation-filter-start (point)))
  
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+end_src
  
Open buffer position
#+begin_src emacs-lisp :results none
(setq display-buffer-alist
  '(("\\*\\(compilation\\)\\*"
     (display-buffer-reuse-window)
     (side            . bottom)
     (reusable-frames . visible)
     (window-height   . 0.33))

   ("\\*\\(Flycheck errors\\)\\*"
     (display-buffer-in-side-window)
     (side            . bottom)
     (reusable-frames . visible)
     (slot            . 1)
     (window-height   . 0.33))

    ("\\*Org todo\\*"
     (display-buffer-in-side-window)
     (side            . bottom)
     (reusable-frames . visible)
     (window-height   . 0.2))

    ("\\*\\([Hh]elp\\|Messages\\|helpful.*\\|xref\\)\\*"
     (display-buffer-in-side-window)
     (side           . right)
     (window-width   . 0.5))

    ("\\*\\(eshell\\|Python\\|Synonyms List\\)\\*"
     (display-buffer-in-side-window)
     (side           . bottom)
     (window-height  . 0.4))

    ("\\*\\(Buffer List\\|Bufler\\)\\*"
     (display-buffer-same-window))

    ("\\*Async Shell Command\\*"
     (display-buffer-no-window))

    ("\\*Man .*\\*"
     (display-buffer-in-side-window)
     (side           . right)
     (window-width   . 0.5))

    ("^magit:.*"
     (display-buffer-same-window))))
#+end_src

Line wrapping.
#+begin_src emacs-lisp :results none
(setq-default truncate-lines t)
(setq truncate-lines t)
(setq truncate-partial-width-windows nil)
(setq-default fill-column 80)
#+end_src
  
Allow remembering risky variables
#+begin_src emacs-lisp :results none
(defun risky-local-variable-p (sym &optional _ignored) nil)
#+end_src

Compilation settings.
#+begin_src emacs-lisp :results none
(setq compilation-scroll-output t)
(setq compilation-always-kill t)
#+end_src

* Miscellaneous
#+begin_src emacs-lisp :results none
(setq auth-sources '("~/.authinfo"))
#+end_src

* Use =evil-mode=
Use =evil-mode=
#+begin_src emacs-lisp :results none
(use-package evil
  :straight t
  :demand
  :init
    (setq evil-want-keybinding nil)
  :config
    (setq evil-ex-substitute-global t)
    (setq aw-keys '(?h ?j ?k ?l ?a ?s ?d ?f))

    (defmacro define-and-bind-text-object (key start-regex end-regex)
      (let ((inner-name (make-symbol "inner-name"))
            (outer-name (make-symbol "outer-name")))
        `(progn
           (evil-define-text-object ,inner-name (count &optional beg end type)
             (evil-select-paren ,start-regex ,end-regex beg end type count nil))
           (evil-define-text-object ,outer-name (count &optional beg end type)
             (evil-select-paren ,start-regex ,end-regex beg end type count t))
           (define-key evil-inner-text-objects-map ,key (quote ,inner-name))
           (define-key evil-outer-text-objects-map ,key (quote ,outer-name)))))
    
    (define-and-bind-text-object "=" "=" "=")
    (define-and-bind-text-object "~" "~" "~")
    (define-and-bind-text-object "*" "*" "*")
    (define-and-bind-text-object "_" "_" "_")
    (define-and-bind-text-object "/" "/" "/")

    (evil-mode +1)
  :bind (:map evil-motion-state-map
        ("C-w C-U" . winner-undo)
        ("C-w C-w" . ace-window)
        ("C-w w"   . ace-window)))

(use-package evil-collection
  :after evil
  :straight t
  :config
    (evil-collection-init))
#+end_src

Use =evil-commentary=
#+begin_src emacs-lisp :results none
(use-package evil-commentary
   :after evil
   :straight t
   :config
    (evil-commentary-mode +1))
#+end_src

Use =evil-surround=
#+begin_src emacs-lisp :results none
(use-package evil-surround
   :straight t
   :after evil
   :config
     (global-evil-surround-mode +1))
#+end_src

* Configure =hydra=
#+begin_src emacs-lisp :results none
(use-package hydra
 :straight t
 :defer t
 :custom 
   (head-hint nil)
   (hydra-key-format-spec "[%s]"))
#+end_src

** Dired
#+begin_src emacs-lisp :results none
(defhydra hydra-dired-bookmarks (:color blue)
  ("c" (lambda () (interactive) (dired "~/studies/sem4")))
  ("d" (lambda () (interactive) (dired "~/Downloads")))
  ("D" (lambda () (interactive) (dired "~/Dropbox")))
  ("g" (lambda () (interactive) (dired "~/Dropbox/Apps/GoodNotes 5/'/GoodNotes")))
  ("h" (lambda () (interactive) (dired "~/")))
  ("m" (lambda () (interactive) (dired "~/work/monorepo")))
  ("s" (lambda () (interactive) (dired "~/Dropbox/org/resources/studies")))
  ("S" (lambda () (interactive) (dired "~/scripts")))
  ("w" (lambda () (interactive) (dired "~/work"))))
#+end_src

** Forge 
#+begin_src emacs-lisp :results none
(defhydra hydra-forge (:color blue)
  "
  ^
  ^Forge^     
  ^────^───────────
  _a_ Assign reviewer
  _b_ Browse
  _c_ Create PR
  _p_ Browse PR
  ^^        
  "
  ("a" #'forge-edit-topic-review-requests)
  ("b" #'forge-browse-remote)
  ("c" #'forge-create-pullreq)
  ("p" #'forge-browse-pullreq))
#+end_src
   
** LSP
#+begin_src emacs-lisp :results none
(defhydra hydra-lsp-toggle (:color blue)
   "
   ^
   ^Toggle^     
   ^────^───────────
   _m_ iMenu
   ^^        
   "
   ("m" #'lsp-ui-imenu))
#+end_src
   
** Scala
#+begin_src emacs-lisp :results none
(defhydra hydra-scala-surround (:color blue)
   "
   ^
   ^Surround^     
   ^────^───────────
   _l_ List
   _o_ Option
   _i_ IO
   _f_ Future
   ^^        
   "
   ("l" #'+scala/surround-word-with-list)
   ("o" #'+scala/surround-word-with-option)
   ("t" #'+scala/surround-word-with-try)
   ("i" #'+scala/surround-word-with-io)
   ("f" #'+scala/surround-word-with-future)
   ("s" #'+scala/surround-word-with-future-successful))
 #+end_src
 
** Python
#+begin_src emacs-lisp :results none
(defhydra hydra-python-surround (:color blue)
   "
   ^
   ^Surround^     
   ^────^───────────
   _l_ List
   _o_ Optional
   ^^        
   "
   ("l" #'+python/surround-word-with-list)
   ("o" #'+python/surround-word-with-optional))
#+end_src

* Global keybindings 
Buffer commands.
#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-x C-x") #'save-buffer)
(global-set-key (kbd "C-x C-b") #'ibuffer)
(global-set-key (kbd "C-c b n") #'next-buffer)
(global-set-key (kbd "C-c b p") #'previous-buffer)
#+end_src

#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-x r k") #'consult-bookmark)
#+end_src

#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-c n b") #'ivy-bibtex)
#+end_src

#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-x 4 j") #'dired-jump-other-window)
#+end_src

#+begin_src emacs-lisp :results none
(global-unset-key (kbd "C-SPC"))
#+end_src

#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-M-k") #'consult-yank-from-kill-ring)
#+end_src

Evaluation commands.
#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-c e d") #'eval-defun)
(global-set-key (kbd "C-c e b") #'eval-buffer)
#+end_src

Dired jump.
#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-x C-j") 'dired-jump)
#+end_src

Disable downcase-region
#+begin_src emacs-lisp :results none
(global-unset-key (kbd "C-x C-l"))
#+end_src

Toggle line truncation.
#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-x w") 'toggle-truncate-lines)
#+end_src

Easier movements between splits.
#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-h") #'evil-window-left)
(global-set-key (kbd "C-j") #'evil-window-down)
(global-set-key (kbd "C-k") #'evil-window-up)
(global-set-key (kbd "C-l") #'evil-window-right)
#+end_src

Only window.
#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-c o") #'delete-other-windows)
#+end_src

Vim-like screen jumping.
#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-u") #'evil-scroll-up)
#+end_src

Use "C-w d" to close a window.
#+begin_src emacs-lisp :results none
(define-key evil-window-map (kbd "d") #'evil-window-delete)
#+end_src

Use =zoom-window=.
#+begin_src emacs-lisp :results none
(define-key evil-window-map (kbd "o") #'zoom-window-zoom)
(define-key evil-window-map (kbd "C-o") #'zoom-window-zoom)
#+end_src

Use =org-capture=.
#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-c c") #'org-capture)
#+end_src

Use =emojify-mode=
#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-c n e") #'emojify-insert-emoji)
#+end_src

Scale text.
#+begin_src emacs-lisp :results none
(global-set-key (kbd "C-+") #'text-scale-increase)
(global-set-key (kbd "C--") #'text-scale-decrease)
#+end_src
  
* Misc Functions
#+begin_src emacs-lisp :results none
(defun +core/scratch-buffer () 
   (interactive)
   (switch-to-buffer (generate-new-buffer "*scratch*")))
#+end_src
 
#+begin_src emacs-lisp :results none
(defun +core/convert-to-list ()
  (interactive)
  (evil-ex (concat "'<,'>" "s/" ".*" "/" "\"\\0\"," "/g")))
#+end_src

#+begin_src emacs-lisp :results none
  (defun +core/refresh-config ()
    (interactive)
    (org-babel-tangle-file "~/.emacs.default/configuration.org" "~/.emacs.default/configuration.el"))
 #+end_src
  
#+begin_src emacs-lisp :results none
(defun +core/summon-scratch ()
   (interactive)
   (switch-to-buffer-other-window "*scratch*"))
#+end_src

#+begin_src emacs-lisp :results none
(defun +core/copy-file-path ()
  (interactive)
  (kill-new (buffer-file-name)))
#+end_src
 
#+begin_src emacs-lisp :results none
(defun +core/reload-theme ()
   (interactive)
   (let ((theme (-first-item custom-enabled-themes)))
      (load-theme theme t)))
#+end_src
 
#+begin_src emacs-lisp :results none
(defvar +core/dark-theme 'noctilux)
(defvar +core/light-theme 'modus-operandi)

(defun +core/load-theme (theme)
   (mapcar #'disable-theme custom-enabled-themes)
   (load-theme theme t))

(defun +core/redraw-dired-buffers ()
  (dolist (buffer (buffer-list))
    (with-current-buffer buffer
      (if (equal major-mode #'dired-mode)
	  (revert-buffer)))))

(defun +core/toggle-darkmode ()
  (interactive)

  (if (equal (car custom-enabled-themes) +core/dark-theme)
     ;; TODO: could be improved by extracting background directly from theme
     (progn
       (+core/load-theme +core/light-theme)
       (setq org-format-latex-options (plist-put org-format-latex-options :background "white")))
     (progn
       (+core/load-theme +core/dark-theme)
       (setq org-format-latex-options (plist-put org-format-latex-options :background "#202020"))))

  (treemacs-icons-dired-mode -1)
  (treemacs-icons-dired-mode 1)
  (+core/redraw-dired-buffers))
#+end_src

Based on the excellent [[https://protesilaos.com/dotemacs/#h:0077f7e0-409f-4645-a040-018ee9b5b2f2][LINK]]
#+begin_src emacs-lisp :results none
(defun +core/to-floating-frame()
  (interactive)
  (delete-window)
  (make-frame '((name . "floating")
                (window-system . x)
                (minibuffer . nil))))

 (defun +core/to-regular-bottom-window()
    (interactive)
    (+core/to-regular-window `bottom))

(defun +core/to-regular-right-window()
   (interactive)
   (+core/to-regular-window `right))

(defun +core/to-regular-window(position)
  (let ((buffer (current-buffer)))
    (with-current-buffer buffer
      (delete-window)
      (pcase position
        (`bottom (display-buffer-at-bottom buffer nil))
        (`right (display-buffer-in-direction buffer '((direction . right))))))))
#+end_src
  
#+begin_src emacs-lisp :results none
(defun +core/surround-word-with (left right)
   (backward-to-word 1)
   (forward-to-word 1)
   (kill-word 1)
   (insert left)
   (yank)
   (insert right))
#+end_src

* Configure =exec-path-from-shell=
#+begin_src emacs-lisp :results none
(use-package exec-path-from-shell
  :straight t
  :init
    (exec-path-from-shell-initialize))
#+end_src

* Configure =which-key=
#+begin_src emacs-lisp :results none
(use-package which-key
  :straight t
  :defer t
  :init (which-key-mode))
#+end_src
 
* Configure =avy= / =evil-easymotion= / =evil-snipe=
#+begin_src emacs-lisp :results none
(use-package avy 
  :straight t
  :defer t)
  
(use-package evil-easymotion
  :straight t
  :defer t)
#+end_src

#+begin_src emacs-lisp :results none
(define-key evil-motion-state-map (kbd "g s k") #'evilem-motion-previous-line)
(define-key evil-motion-state-map (kbd "g s j") #'evilem-motion-next-line)
(define-key evil-motion-state-map (kbd "g s f") #'evil-avy-goto-char)
(define-key evil-motion-state-map (kbd "g s s") #'evil-avy-goto-char-2)
#+end_src

* Configure =perspective=
#+begin_src emacs-lisp :results none
(use-package perspective 
  :defer 5
  :straight t
  :custom
    (persp-mode-prefix-key (kbd "C-c M-p"))
  :init
    (persp-mode)
  :config 
    (define-key evil-normal-state-map (kbd "gt") #'persp-next)
    (define-key evil-normal-state-map (kbd "gT") #'persp-prev))
#+end_src

* Configure =recentf=
#+begin_src emacs-lisp :results none
(use-package recentf
  :straight nil
  :defer 10
  :config
    (setq recentf-max-saved-items 300)
    (add-to-list 'recentf-keep 'file-remote-p)
    (recentf-mode +1))
#+end_src

* Configure =ivy-bibtex=
#+begin_src emacs-lisp :results none :tangle no
(use-package ivy-bibtex
  :disabled
  :straight t
  :defer t
  :config
    (setq bibtex-completion-bibliography '("~/Dropbox/zotero/zotero.bib"))
    (setq bibtex-completion-pdf-field "File")

    (org-roam-bibtex-mode))
#+end_src

#+begin_src emacs-lisp :results none :tangle no
(defun +bibtex/open-on-scihub ()
  (interactive)
  (let ((url (bibtex-url (point) t))
        (scihub-url "https://sci-hub.se/"))
    (browse-url (concat scihub-url (string-trim url)))))
#+end_src

* Configure =flycheck=
#+begin_src emacs-lisp :results none
(use-package flycheck
  :defer t
  :straight t
  :init (global-flycheck-mode)
  :config 
    (evil-define-key '(normal) flycheck-mode-map (kbd "] e") 'flycheck-next-error)
    (evil-define-key '(normal) flycheck-mode-map (kbd "[ e") 'flycheck-previous-error)

    (defvar arrow (vector 
      #b00100000
      #b00110000
      #b00111000
      #b00111100
      #b00111110
      #b00111100
      #b00111000
      #b00110000
      #b00100000))

    (defvar line (vector 
       #b00100000
       #b00100000
       #b00100000
       #b00100000
       #b00100000
       #b00100000
       #b00100000
       #b00100000
       #b00100000
       #b00100000
       #b00100000
       #b00100000
       #b00100000
       #b00100000
       #b00100000
       #b00100000
       #b00100000
       #b00100000
       #b00100000
       #b00100000
       #b00100000
       #b00100000))

    (define-fringe-bitmap 'flycheck-fringe-bitmap-ball arrow)
    (define-fringe-bitmap 'flycheck-fringe-bitmap-continuation line)
    ;; flycheck-fringe-bitmap-continuation (?)

    ;; TODO: bookmarks
    (define-fringe-bitmap 'bookmark-fringe-mark arrow)

    (flycheck-define-error-level 'error
      :severity 100
      :compilation-level 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-error
      :error-list-face 'flycheck-error-list-error)

    (flycheck-define-error-level 'warning
      :severity 50
      :compilation-level 1
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-warning
      :error-list-face 'flycheck-error-list-warning)

    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc proselint)))
#+end_src
* Configure =org=
** Core
#+begin_src emacs-lisp :results none
(use-package org
  :straight t
  :defer t
  :delight
  :custom
  (org-ellipsis " ▾")
  (org-todo-keyword-faces '(
			    ("PROJECT" . (:inherit default :height 1.2 :foreground "#ffffff" :weight normal :underline t))
			    ("STRT"    . (:inherit default :height 1.2 :foreground "#0198e1" :weight normal :underline t))
			    ("SOMEDAY" . (:inherit default :height 1.2 :foreground "#ff8888" :weight normal :underline t))
			    ("REVIEW"  . (:inherit default :height 1.2 :foreground "#f1fa8c" :weight normal :underline t))
			    ("DEPLOY"  . (:inherit default :height 1.2 :foreground "#f1fa8c" :weight normal :underline t))
			    ("WAIT"    . (:inherit default :height 1.2 :foreground "#f1fa8c" :weight normal :underline t))))
  :config 
  (require 'org-tempo)

  (setq org-hide-emphasis-markers t)
  (setq korg-list-allow-alphabetical t)
  (setq org-fontify-done-headline t)
  (setq org-use-fast-todo-selection 'expert)
  (setq org-image-actual-width nil)
  (setq org-src-window-setup 'split-window-below)
  (setq org-odt-preferred-output-format "docx")
  (setq org-confirm-babel-evaluate nil)
  (setq org-tags-column -1)
  (setq org-capture-bookmark nil)
  (setq org-export-with-sub-superscripts nil)
  (setq org-indirect-buffer-display 'current-window)

  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-src-preserve-indentation t)

  (setq org-fontify-quote-and-verse-blocks t)

  (org-babel-do-load-languages 'org-babel-load-languages
			       '((shell . t)
				 (emacs-lisp . t)
				 (python . t)
				 (plantuml . t)
				 (scheme . t) 
				 (js . t)
				 (sql . t)
				 ;; (ammonite . t)
				 ;; (http . t)
				 ;; (mongo . t)
				 (haskell . t)))

  (setq org-plantuml-jar-path
        (expand-file-name "~/tools/plantuml.jar"))

  (setq org-startup-with-inline-images t)

  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)

  ;; LaTeX options
  (defun +latex-rescale ()
    (interactive)
    (org-latex-preview '(64))
    (plist-put (plist-put org-format-latex-options :background "#1c2128")
               :scale (if (= (x-display-pixel-width) 1920) 1.7 2.0))
    (org-latex-preview '(16)))

  (setq org-latex-inputenc-alist nil)
  (setq org-latex-compiler "xelatex")
  (setq org-latex-pdf-process '("latexmk -xelatex -quiet -shell-escape -f %f"))
  (add-to-list 'org-latex-packages-alist '("" "fontspec"))

  (setq org-format-latex-options 
	(plist-put (plist-put org-format-latex-options :background "#1c2128") :scale 1.5))

  ;; open files in the same window
  (setf (alist-get 'file org-link-frame-setup) 'find-file)

  (setq org-todo-keywords
	'((sequence "REPEAT(r)" "TODO(t)" "NEXT(n)" "PROJECT(p)" "REVIEW(R)" "DEPLOY(E)" "STRT(s)" "SOMEDAY(S)" "WAIT(w)" "|" "DONE(d!)" "KILL(k)")
	  (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")))

  (evil-collection-define-key 'normal 'org-mode-map
    (kbd "C-k") 'evil-window-up
    (kbd "C-j") 'evil-window-down)

  (add-to-list 'org-emphasis-alist '("`" bold :foreground "Orange"))


  (setq org-default-notes-file (concat org-directory "~/Dropbox/org/todo/notes.org"))

  (setq org-capture-templates
        '(("w" "Work" entry (file "~/Dropbox/org/todo/work.org")
           "* TODO %?
:PROPERTIES:
:CreatedAt: %T
:END:\n" )
("p" "Private" entry (file "~/Dropbox/org/todo/private.org")
           "* TODO %?
:PROPERTIES:
:CreatedAt: %T
:END:\n" )
          ("j" "Work Journal" entry (file+olp+datetree "~/Dropbox/org/todo/work-journal.org") "*** %?
:PROPERTIES:
:Effort:   %?
:END:\n")))

  (add-hook 'org-mode-hook
	    (lambda () (progn (push '(":@call:" . "☎") prettify-symbols-alist)
			      (push '("[ ]" . "☐") prettify-symbols-alist)
			      (push '("[-]" . "⚀") prettify-symbols-alist)
			      (push '("[X]" . "☒") prettify-symbols-alist)
			      (push '("->" . "→") prettify-symbols-alist)
			      (push '("<-" . "←") prettify-symbols-alist)
			      (push '("<->" . "←→") prettify-symbols-alist)
			      (push '("---" . "⎯") prettify-symbols-alist)
			      (push '("#+begin_quote" . ">") prettify-symbols-alist)
			      (push '("#+end_quote" . "<") prettify-symbols-alist)
			      (push '("#+BEGIN_QUOTE" . ">") prettify-symbols-alist)
			      (push '("#+END_QUOTE" . "<") prettify-symbols-alist)
			      (push '("#+begin_src" . ">") prettify-symbols-alist)
			      (push '("#+end_src" . "<") prettify-symbols-alist)
			      (push '("#+BEGIN_SRC" . ">") prettify-symbols-alist)
			      (push '("#+END_SRC" . "<") prettify-symbols-alist)

			      (prettify-symbols-mode 1))))

  (defun org-archive-save-buffer ()
    (let ((afile (car (org-all-archive-files))))
      (if (file-exists-p afile)
          (let ((buffer (find-file-noselect afile)))
            (with-current-buffer buffer
              (save-buffer)))
        (message "Ooops ... (%s) does not exist." afile))))

  (add-hook 'org-archive-hook 'org-archive-save-buffer)

  (add-hook 'after-init-hook
	    (lambda ()
	      (require 'org-indent)  
	      (set-face-attribute 'org-indent nil
				  :inherit '(org-hide fixed-pitch))))
  :bind
  (:map evil-normal-state-map
        ("C-c h" . org-toggle-heading)
        ("C-k" . evil-window-up)
        ("C-j" . evil-window-down)
	:map org-mode-map 
        ("C-c h" . org-toggle-heading)
        ("C-x n S" . org-tree-to-indirect-buffer))
  :hook (org-mode . org-indent-mode)
  (org-mode . variable-pitch-mode)
  (org-mode . auto-fill-mode))
#+end_src

#+begin_src emacs-lisp :results none
(use-package org-contrib
  :after org
  :straight t)
#+end_src

#+begin_src emacs-lisp :results none
(use-package org-utf-to-xetex
  :straight (org-utf-to-xetex :type git :host github :repo "grettke/org-utf-to-xetex" :branch "master")
  :commands (org-utf-to-xetex-prettify)
  :hook (org-mode . org-utf-to-xetex-prettify))
#+end_src

#+begin_src emacs-lisp :results none
(use-package org-superstar
  :straight t
  :after org
  :hook (org-mode . org-superstar-mode)
  :custom
  (org-superstar-remove-leading-stars t)
  (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●"))
  (org-superstar-item-bullet-alist '((?* . ?•) (?+ . ?⚬) (?- . ?–))))
#+end_src
   
#+begin_src emacs-lisp :results none
(defun +org/open-at-point-other-window ()
  (interactive)

  (let ((org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                                (vm-imap . vm-visit-imap-folder-other-frame)
                                (file . find-file-other-window)
                                (wl . wl-other-frame))))

    (org-open-at-point)))
#+end_src

** Org Agenda
#+begin_src emacs-lisp :results none
(use-package evil-org
  :straight t
  :after org
  :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook 'general-define-org-keys)
    
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

#+begin_src emacs-lisp :results none
(defun general-define-org-keys ()
  (general-define-key 
      :states '(normal insert motion)
      :keymaps '(evil-org-mode-map org-mode-map)
      "C-<return>" '+org/c-ret-dwim
      "C-S-<return>" '+org/c-s-ret-dwim
      "C-M-<return>" '+org/c-m-ret-dwim
      "C-c f o" 'flash-open-notes)

  (general-define-key 
      :states '(normal)
      :keymaps '(evil-org-mode-map org-mode-map)
      "<return>" '+org/ret-dwim))
#+end_src

#+begin_src emacs-lisp :results none
(use-package pagenda
  :load-path "~/.emacs.default/packages/pagenda/"
  :hook (org-agenda-mode . pagenda-mode)
  :commands (pagenda-mode +agenda/daily-agenda +agenda/weekly-agenda)
  :defer t)
#+end_src

#+begin_src emacs-lisp :results none
(use-package org-super-agenda
  :straight t
  :defer t
  :hook
    (org-agenda-mode . org-super-agenda-mode)
  :bind 
    (:map org-agenda-keymap (("h" . evil-backward-char) ("k" . evil-previous-line) ("l" . evil-forward-char) ("j" . evil-next-line))
	:map org-agenda-mode-map (("h" . evil-backward-char) ("k" . evil-previous-line) ("l" . evil-forward-char) ("j" . evil-next-line))
	:map org-super-agenda-header-map (("h" . evil-backward-char) ("k" . evil-previous-line) ("l" . evil-forward-char) ("j" . evil-next-line)))
  :config
    (setq org-agenda-files '(
       "~/Dropbox/org-roam/2022-02-23--18-45-30Z--psychologia_społeczna_ii_zajęcia.org"
       "~/Dropbox/org-roam/2022-02-25--10-17-45Z--psychologia_edukacji.org"
       "~/Dropbox/org-roam/2022-02-27--13-15-43Z--psychologia_zaburzen_zajęcia.org"
       "~/Dropbox/org-roam/2022-03-02--14-00-31Z--psychologia_rozwoju_w_biegu_zycia_ii_zajęcia.org"
       "~/Dropbox/org-roam/2021-10-03--10-46-11Z--język_angielski_zajęcia.org"
       "~/Dropbox/org-roam/2022-03-01--12-00-27Z--psychometria_zajęcia.org"
       "~/Dropbox/org/todo/work.org"
       "~/Dropbox/org/todo/private.org")))
#+end_src

** Academic
#+begin_src emacs-lisp :results none
(use-package org-ref 
  :straight t
  :defer t
  :after org
  :config 
  (setq org-ref-default-bibliography '("~/Dropbox/zotero/zotero.bib"))
  (setq org-ref-bibliography-notes "~/Dropbox/papers/notes.org")
  (setq org-ref-pdf-directory "~/Dropbox/papers/pdfs")

  (defun +org-ref/org-ref-open-associated-pdf ()
    (interactive)
    (let* ((key (string-remove-prefix "cite:" (+org/property-value "roam_key")))
	   (pdf-file (car (bibtex-completion-find-pdf key))))
      (if (and pdf-file (file-exists-p pdf-file))
	  (find-file-other-window pdf-file)
	(message "No PDF found for %s" key))))

  (defun +org-ref/org-ref-open-pdf-at-point ()
    (interactive)
    (let* ((results (org-ref-get-bibtex-key-and-file))
	   (key (car results))
	   (pdf-file (car (bibtex-completion-find-pdf key))))
      (if (file-exists-p pdf-file)
	  (org-open-file pdf-file)
	(message "No PDF found for %s" key))))

(setq org-ref-open-pdf-function '+org-ref/org-ref-open-pdf-at-point))
#+end_src
 
#+begin_src emacs-lisp :results none :tangle no
(use-package academic-phrases
  :straight t
  :defer t)
#+end_src

** Org journal
#+begin_src emacs-lisp :results none :tangle no
(use-package org-journal
  :disbled
  :straight t
  :defer t
  :init
    (setq org-journal-prefix-key "C-c j")
  :config
    (setq org-journal-dir "~/Dropbox/org/journal/"
          org-journal-date-format "%A, %d %B %Y"))
#+end_src

** Org Babel
#+begin_src emacs-lisp :results none
(use-package ob-async
  :defer t
  :after org
  :straight t)
#+end_src

#+begin_src emacs-lisp :results none
(use-package ob-mongo
  :straight t
  :defer t)
#+end_src

#+begin_src emacs-lisp :results none
(use-package ob-ipython
  :straight t
  :defer t)
#+end_src

#+begin_src emacs-lisp :results none
(use-package ob-http
 :straight t
 :defer t
 :config
   (add-to-list 'org-babel-load-languages '(http . t))
   (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
#+end_src

#+begin_src emacs-lisp :results none
(use-package ob-ammonite
  :straight t
  :defer t)
#+end_src

#+begin_src emacs-lisp :results none 
(use-package jupyter
 :straight t
 ;; :commands (jupyter-org-insert-src-block jupyter-org-kill-block-and-results)
 :config
  (add-to-list 'org-babel-load-languages '(jupyter . t))
  (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
#+end_src

** Org Fancy Priorities
#+begin_src emacs-lisp :results none
(use-package org-fancy-priorities
  :straight t
  :defer t
  :hook
    (org-mode . org-fancy-priorities-mode)
  :config
    (setq org-fancy-priorities-list '("❗" "❕" "⇓")))
#+end_src

** Export CSS
#+begin_src emacs-lisp :results none
(defun my-org-inline-css-hook (exporter)
  "Insert custom inline css"
  (when (eq exporter 'html)
    (let* ((dir (ignore-errors (file-name-directory (buffer-file-name))))
           (path (concat dir "style.css"))
           (homestyle (or (null dir) (null (file-exists-p path))))
           (final (if homestyle "~/.emacs.default/org.css" path)))

      (setq org-html-head-include-default-style nil)
      (setq org-html-head (concat
                           "<style type=\"text/css\">\n"
                           "<!--/*--><![CDATA[/*><!--*/\n"
                           (with-temp-buffer
                             (insert-file-contents final)
                             (buffer-string))
                           "/*]]>*/-->\n"
                           "</style>\n")))))

(add-hook 'org-export-before-processing-hook 'my-org-inline-css-hook)
#+end_src

** Functions
#+begin_src emacs-lisp :results none
(defun +org/ret-dwim ()
  (interactive)
  (let* ((context (org-element-context))
         (type (org-element-type context)))

    (pcase type
      (`headline
       (let ((todo-keyword (org-element-property :todo-keyword context)))
	 (pcase todo-keyword
	   (`"[ ]" (org-todo "[-]"))
	   (`"[-]" (org-todo "[X]"))
	   (`nil (message "+org/ret-dwim - ignore"))
           (default (org-todo)))))
      (`item
       (org-toggle-checkbox))
      (`plain-list
       (org-toggle-checkbox))
      (`paragraph
       (save-excursion
	 (beginning-of-line)
	 (forward-char)

	 (let* ((context (org-element-context))
	        (type (org-element-type context)))

	   (pcase type
	     (`item (org-toggle-checkbox))))))
      (`link
       (org-open-at-point)))))
#+end_src

#+begin_src emacs-lisp :results none
(defun +org/insert-item-next-line ()
  (move-end-of-line nil)
  (org-insert-item))
#+end_src

#+begin_src emacs-lisp :results none
(defun +org/insert-item-prev-line ()
  (move-beginning-of-line nil)
  (org-insert-item))
#+end_src

#+begin_src emacs-lisp :results none
(defun +org/c-ret-dwim ()
  (interactive)
  (let* ((context (org-element-context))
         (type (org-element-type context)))
    
    (pcase type
      (`item (+org/insert-item-next-line))

      (`plain-list (+org/insert-item-next-line))
      (`latex-fragment (org-latex-preview))
      (`paragraph
       (if (org-in-item-p) 
         (+org/insert-item-next-line)
         (org-insert-heading-respect-content)))
      (_ (org-insert-heading-respect-content)))))
#+end_src

#+begin_src emacs-lisp :results none
(defun +org/s-ret-dwim ()
  (interactive)
  (let* ((context (org-element-context))
         (type (org-element-type context)))
    
    (pcase type
      (_ (+org/open-at-point-other-window)))))
#+end_src

#+begin_src emacs-lisp :results none
(defun +org/c-s-ret-dwim ()
  (interactive)
  (let* ((context (org-element-context))
         (type (org-element-type context)))

    (pcase type
      (`item (+org/insert-item-prev-line))
      (`plain-list (+org/insert-item-prev-line))
      (`paragraph
       (if (org-in-item-p) 
         (+org/insert-item-prev-line)
         (+org/insert-heading-before)))
      (_ (+org/insert-heading-before)))))
#+end_src

#+begin_src emacs-lisp :results none
(defun +org/c-m-ret-dwim ()
  (interactive)
  (let* ((context (org-element-context))
         (type (org-element-type context)))


    (+org/insert-subheading-respecting-content-below)))
#+end_src

#+begin_src emacs-lisp :results none
(defun +org/insert-subheading-respecting-content-below ()
  (interactive)
  (org-insert-heading-respect-content)
  (org-do-demote))
#+end_src

#+begin_src emacs-lisp :results none
(defun +org/insert-heading-before ()
  (interactive)
  (org-backward-heading-same-level 0)
  (move-beginning-of-line nil)
  (org-insert-heading))
#+end_src

Save image and insert it's link at point.
#+begin_src emacs-lisp :results none
(defun +org/save-image-insert-link (url)
  (interactive "sURL: ")
  (let* ((now (floor (* 1000 (float-time))))
         (path (concat "~/Dropbox/img/" (number-to-string now) ".png")))
    (url-copy-file url path)
    (insert (concat "#+ATTR_ORG: :width 350\n" "[[" path "]]"))))
#+end_src

#+begin_src emacs-lisp :results none
(defun +org/property-value (property)
  (car (mapcar
      (lambda (prop) (org-element-property :value prop))
      (org-element-map
          (org-element-parse-buffer)
          'keyword
          (lambda (el) (when (string-match property (org-element-property :key el)) el))))))
#+end_src

** org-publish
#+begin_src emacs-lisp :results none :tangle no
(use-package publish
  :load-path "~/.emacs.default/packages/publish"
  :commands (p/publish-configure p/force-publish-current-file)
  :init
    (p/publish-configure))
#+end_src

** ox-slack
#+begin_src emacs-lisp :results none
(use-package ox-slack
  :defer t
  :straight t)
#+end_src

* Configure =org-roam= 
#+begin_src emacs-lisp :results none
(use-package org-roam
  :straight t
  :defer t
  :commands org-roam-node-find
  ;; :hook (org-mode . org-roam-setup)
  :bind (:map global-map
              (("C-c n f" . org-roam-node-find)
               ("C-c n F" . +org-roam/find-file-by-title)
               ("C-c n d n" . org-roam-dailies-capture-today)
               ("C-c n d d" . org-roam-dailies-goto-today))
              :map org-roam-node-map
              (("C-c n l" . +org-roam/goto-linked-file)
               ("C-c n L" . org-roam)
               ("C-c n f" . org-roam-find-file)
               ("C-c n F" . +org-roam/find-file-by-title)
               ("C-c n C" . org-roam-db-sync)
               ("C-c n g" . org-roam-buffer-toggle)
               ("C-c n w" . writer)
               ("C-c n p" . +org-ref/org-ref-open-associated-pdf))
              :map org-mode-map
              (("C-c C-b" . org-cycle-list-bullet)
               ("C-c n l" . +org-roam/goto-linked-file)
               ("C-c n i" . org-roam-node-insert)))
  :init
    (setq org-roam-v2-ack t)
  :config 
    (setq org-roam-directory "~/Dropbox/org-roam")
    (setq org-roam-dailies-directory "journal/")
  
    (setq org-roam-dailies-capture-templates
  	'(("d" "default" entry "* %<%I:%M %p>: %?"
             :if-new (file+head "%<%Y-%m-%d>.org" "#+title: Journal: %<%Y-%m-%d>\n"))))
  
    (setq org-roam-capture-templates '(
            			     ("d" "default" plain 
            			      "%?"
                                        :if-new
                                        (file+head "%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}.org\" (current-time) t)"
  						 "#+title: ${title}\n#+filetags: \n#+startup: content latexpreview\n")
            			      :unnarrowed t)))

   (org-roam-db-autosync-mode))
#+end_src

#+begin_src emacs-lisp :results none
(defun +org-roam/find-file-by-title ()
  (interactive)
  (org-roam-node-find nil (+org/property-value "TITLE")))
#+end_src

#+begin_src emacs-lisp :results none
(defun +org-roam/find-file-next ()
  (interactive)

  (let ((title (+org/property-value "TITLE")))
    (when (string-match ".*\\([0-9]+\\)" title)
      (print (match-string 1)))))
#+end_src

#+begin_src emacs-lisp :results none
(defun +org-roam/goto-linked-file ()
  (interactive)

  (let* ((titles (-map (lambda (link) (org-roam-node-title (org-roam-backlink-source-node link)))
                       (org-roam-backlinks-get (org-roam-node-at-point 'assert))))
         (title (completing-read " " titles))
         (file (org-roam-node-file (org-roam-node-from-title-or-alias title))))
    (find-file file)))
#+end_src

#+begin_src emacs-lisp :results none
(defvar orb-title-format "${author-or-editor-abbrev} (${date}).  ${title}.")

(use-package org-roam-bibtex
  :disabled
  :straight t
  :defer t
  :custom
    (orb-autokey-format "%a%y")
    (orb-templates
     `(("r" "ref" plain
        (function org-roam-capture--get-point)
        ""
        :file-name "refs/${citekey}"
        :head ,(s-join "\n"
                       (list
                        (concat "#+title: "
                                orb-title-format)
                        "#+roam_key: ${ref}"
                        "#+created: %U"))
        :unnarrowed t))))
#+end_src

#+begin_src emacs-lisp
(defun +org/insert-roam-link ()
    "Inserts an Org-roam link."
    (interactive)
    (insert "[[roam:]]")
    (backward-char 2))
#+end_src

#+begin_src emacs-lisp :results none
(defun +bibtex/format-citations-apa7 (keys)
  (bibtex-completion-apa-format-reference (car keys)))
#+end_src

* Configure =org-noter=

#+begin_src emacs-lisp :results none
(use-package org-noter
  :straight t
  :defer t)
#+end_src

* Configure =flyspell=
#+begin_src emacs-lisp :results none 
(use-package flyspell
  :straight t
  :defer t
  :config
    (setq ispell-program-name "hunspell")
    (setq ispell-dictionary "english,polish")
    (ispell-set-spellchecker-params)
    (ispell-hunspell-add-multi-dic "english,polish")

  :bind
     (:map flyspell-mode-map
        ("C-," . nil)
        ("C-c $" . nil)))
#+end_src

* Configure =Wucuo=
#+begin_src emacs-lisp :results none
(use-package wucuo
  :straight t
  :defer t)
  ;; :hook (org-roam-mode . wucuo-mode))
#+end_src
* Configure =langtool=
#+begin_src emacs-lisp :results none
(use-package langtool
  :straight t
  :defer t
  :config
    (setq langtool-http-server-host "localhost"
          langtool-http-server-port 8081))
#+end_src
* Configure =yasnippet=
#+begin_src emacs-lisp :results none
(use-package yasnippet
  :straight t
  :defer t
  :hook ((scala-mode . yas-global-mode)
         (python-mode . yas-global-mode)
         (protobuf-mode . yas-global-mode)))
#+end_src

#+begin_src emacs-lisp :results none
(defun yas/proto-messages ()
  (interactive)

  (let ((content (buffer-substring-no-properties (point-min) (point-max)))
  	(matches nil))
  
      (setq pos 0)
      (while (string-match "message \\(\\w+\\)" content pos)
        (push (match-string 1 content) matches)
        (setq pos (match-end 0)))
      matches))
#+end_src

* Configure =projectile=
#+begin_src emacs-lisp :results none
(use-package projectile 
  :straight t
  :defer t
  :config
    (projectile-global-mode)
    (setq projectile-project-search-path '("~/work/monorepo"))
    (setq projectile-enable-caching t)
    (setq projectile-project-root-files-functions #'(projectile-root-top-down
                                                     projectile-root-top-down-recurring
                                                     projectile-root-bottom-up
                                                     projectile-root-local))

    (projectile-register-project-type 'scala '("build.sbt")))
#+end_src
 
#+begin_src emacs-lisp :results none
(defun +projectile/search-word-under-cursor ()
  (interactive)
  (consult-ripgrep (projectile-project-root) (current-word)))
#+end_src

#+begin_src emacs-lisp :results none
(defun +projectile/search-todos ()
  (interactive)
  (consult-ripgrep (projectile-project-root) "todo:"))
#+end_src

#+begin_src emacs-lisp :results none
(defun +projectile/compile (command)
   (interactive)
   (let ((compilation-read-command nil))
    (projectile--run-project-cmd command projectile-compilation-cmd-map
            :show-prompt nil
            :prompt-prefix "Compile command: "
            :save-buffers t)))
#+end_src

#+begin_src emacs-lisp :results none
(defun +projectile/goto-project-root ()
  (interactive)
  (find-file (projectile-project-root)))
#+end_src

* Configure =magit=
#+begin_src emacs-lisp :results none
(use-package magit
  :straight t
  :defer t
  :commands (magit-status magit-branch magit-init magit-push)
  :config
    (setq magit-list-refs-sortby "committerdate")
    
    (setq auto-revert-check-vc-info nil))

(use-package forge 
   :straight t  
   :after magit)
#+end_src
 
vc-annotate options.
#+begin_src emacs-lisp :results none
;; (setq vc-git-annotate-switches '("-c"))
#+end_src

* Configure =eww=
#+begin_src emacs-lisp :results none
(use-package eww
  :straight nil
  :defer t
  :config 
    (evil-collection-define-key 'normal 'eww-mode-map
      "gt" #'persp-next
      "gT" #'persp-prev))

(defun +eww/browse-url (url &optional arg)
  (interactive
   (list
    (completing-read "Browse: " eww-prompt-history
		     nil nil nil 'eww-prompt-history)
    current-prefix-arg))
  (eww url (if arg 4 nil)))
#+end_src

* Configure =git-timemachine=
 #+begin_src emacs-lisp :results none
(use-package git-timemachine 
  :straight t
  :defer t)
 #+end_src

* Configure =treemacs=
#+begin_src emacs-lisp :results none
(use-package treemacs 
   :straight t
   :defer t
   :config 
     (define-key treemacs-mode-map (kbd "SPC o p") #'treemacs)
     (setq treemacs-width 60))

(use-package treemacs-evil
  :straight t
  :after (evil treemacs) 
  :bind (:map evil-treemacs-state-map 
        ("SPC u" . #'universal-argument))
  :config
    (define-key evil-treemacs-state-map (kbd "SPC o p") #'treemacs))

(use-package treemacs-projectile
  :straight t
  :after (projectile treemacs))
#+end_src

* Configure =doom-modeline=
#+begin_src emacs-lisp :results none
(use-package doom-modeline
  :straight t 
  :config 
    (setq doom-modeline-height 25)
    (setq doom-modeline-vcs-max-length 40)
    (setq doom-modeline-enable-word-count t)
    (setq doom-modeline-persp-name nil)

    (doom-modeline-def-modeline 'pc/modeline
      '(bar matches buffer-info remote-host buffer-position selection-info)
      '(minor-modes major-mode vcs process battery checker bar bar))

    (defun pc/setup-modeline ()
      (doom-modeline-set-modeline 'pc/modeline 'default))

    (set-face-attribute 'mode-line nil :height 100)

    (add-hook 'doom-modeline-mode-hook 'pc/setup-modeline)

    (doom-modeline-mode))
#+end_src
* Configure =zoom-window=
 #+begin_src emacs-lisp :results none
(use-package zoom-window 
   :straight t
   :defer t
   :config
     (custom-set-variables
       '(zoom-window-mode-line-color "#4682B4")))
 #+end_src
* Configure =company=
#+begin_src emacs-lisp :results none
(use-package company
  :straight t
  :defer t
  :hook (prog-mode . global-company-mode)
  :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.1)
    (company-backends '((company-capf company-yasnippet) company-dabbrev company-files company-elisp))
    (company-dabbrev-downcase nil)
    (lsp-completion-provider :capf)
  :bind (:map company-active-map
          ("<tab>" . +company/custom-complete)
          ("<return>" . +company/custom-complete))
        (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common)
          ("C-c C-y" . company-yasnippet))
  :config
    (with-eval-after-load 'company
        (define-key company-mode-map (kbd "C-SPC") #'company-complete)
        (define-key company-active-map (kbd "<tab>") #'company-complete-common)
        (define-key company-active-map (kbd "TAB") #'company-complete-common)
        (define-key company-active-map (kbd "RET") #'+company/custom-complete)
        (define-key company-active-map (kbd "<return>") #'company-complete-selection)))

(use-package company-box
  :straight t
  :hook (company-mode . company-box-mode)
  :config
    (setq company-box-doc-enable nil))
#+end_src

#+begin_src emacs-lisp :results none
(defun +company/custom-complete ()
  "Run company-complete-selection either on the selected item or on the first
   item if no candidate was selected."
  (interactive)
  (let ((company-selection (or company-selection 0)))
    (company-complete-selection)))
#+end_src

#+begin_src emacs-lisp :results none
(defun advice-unadvice (sym)
  "Remove all advices from symbol SYM."
  (interactive "aFunction symbol: ")
  (advice-mapc (lambda (advice _props) (advice-remove sym advice)) sym))
#+end_src

#+begin_src emacs-lisp :results none
(advice-add 'company-complete :after (lambda (&rest r) (company-select-next)))
#+end_src

* Configure =helpful=
 #+begin_src emacs-lisp :results none
 (use-package helpful
   :straight t
   :defer t)
 #+end_src

* Configure =keychain=
  #+begin_src emacs-lisp :results none
  (use-package keychain-environment
     :straight t
     :defer 10
     :config (keychain-refresh-environment))
  #+end_src

* Configure =ox-reveal=
#+begin_src emacs-lisp :results none :tangle no
(use-package ox-reveal
  :straight t
  :disabled
  :defer t)
  
(use-package org-re-reveal
  :straight t
  :disabled
  :defer t)
#+end_src

* Configure =ox-slack=
#+begin_src emacs-lisp :results none :tangle no
(use-package ox-slack
  :straight t
  :defer t)
#+end_src

* Configure =emojify=
#+begin_src emacs-lisp :results none
(use-package emojify 
  :straight t
  :defer 10
  :config
    (setq emojify-user-emojis '(
      (":brain:" . (("name" . "Brain") ("unicode" . "🧠") ("style" . "ascii")))))

    (when (featurep 'emojify)
      (emojify-set-emoji-data))
    
      (global-emojify-mode))
#+end_src

* Configure =dired=
#+begin_src emacs-lisp :results none
(use-package dired 
  :straight nil
  :hook (dired-mode . dired-hide-details-mode)
  :config
   (defun +dired/copy-directory ()
     (interactive)
     (kill-new dired-directory))

   (setq dired-dwim-target t)

   (evil-collection-define-key 'normal 'dired-mode-map
     "_" #'+projectile/goto-project-root
     "ge" #'+dired/open-externally
     "gn" #'+dired/open-nautilus
     "yp" #'+dired/copy-path
     "'" #'hydra-dired-bookmarks/body))
#+end_src

#+begin_src emacs-lisp :results none
(use-package treemacs-icons-dired
  :straight t
  :after dired
  :hook (dired-mode . treemacs-icons-dired-enable-once))
#+end_src

#+begin_src emacs-lisp :results none
(defun +dired/open-externally ()
  (interactive)
  (let ((filename (dired-get-filename)))
  (if (s-starts-with? "/ssh" filename)
      (let ((dest (concat "/tmp/" (file-name-nondirectory filename))))
	(tramp-sh-handle-copy-file filename dest t)
	(call-process "xdg-open" nil 0 nil dest)))
     (call-process "xdg-open" nil 0 nil filename)))

(defun +dired/open-nautilus ()
  (interactive)
  (call-process "nautilus" nil 0 nil (expand-file-name default-directory)))

(defun +dired/copy-path ()
  (interactive)
  (kill-new (dired-get-filename)))
#+end_src

#+begin_src emacs-lisp :results none
(use-package dired-subtree
  :straight t
  :after dired
  :bind (:map dired-mode-map
              ("<tab>" . dired-subtree-toggle)
              ("<C-tab>" . dired-subtree-cycle)
              ("<backtab>" . dired-subtree-remove))
  :config
    (setq dired-listing-switches "-alh")
    (advice-add 'dired-create-directory :after (lambda (&rest r) (revert-buffer)))
    (advice-add 'dired-subtree-toggle :after (lambda (&rest r) (revert-buffer)))
    (advice-add 'dired-subtree-cycle :after (lambda (&rest r) (revert-buffer)))
    (advice-add 'dired-subtree-remove :after (lambda (&rest r) (revert-buffer))))
#+end_src

* Configure =ediff=
#+begin_src emacs-lisp :results none
(use-package ediff
  :straight t 
  :defer t
  :config
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-forward-word-function 'forward-char))
#+end_src

* Configure =calfw=
#+begin_src emacs-lisp :results none
(use-package calfw
  :straight t
  :defer t
  :config
    (setq cfw:display-calendar-holidays nil))

(use-package calfw-org
  :defer t
  :straight t)
#+end_src

#+begin_src emacs-lisp :results none
(defun open-calendar ()
  (interactive)
  (cfw:open-calendar-buffer
   :contents-sources
    (list (cfw:org-create-source "Blue"))))
#+end_src

* Configure =smerge=
#+begin_src emacs-lisp :results none
(use-package smerge-mode
  :straight t
  :defer t
  :bind (:map smerge-mode-map 
    ("C-c m u" . smerge-keep-upper)
    ("C-c m l" . smerge-keep-lower)
    ("C-c m a" . smerge-keep-all)
    ("C-c m p" . smerge-prev)
    ("C-c m n" . smerge-next)))
#+end_src

* Configure =selectrum=
#+begin_src emacs-lisp :results none :tangle no
(use-package selectrum
  :disabled
  :straight t
  :defer t
  :config
    (setq selectrum-max-window-height 15)
    (setq selectrum-fix-vertical-window-height t)
    (setq selectrum-highlight-candidates-function #'selectrum-candidates-identity)
    (selectrum-mode +1))
#+end_src

#+begin_src emacs-lisp :results none :tangle no
(use-package selectrum-prescient
  :straight t
  :disabled
  :after selectrum
  :config
   (selectrum-prescient-mode +1)
   (prescient-persist-mode +1))
#+end_src

* Configure =vertico=
#+begin_src emacs-lisp :result none
(use-package vertico
  :straight t
  :init (vertico-mode))
#+end_src

#+begin_src emacs-lisp :result none
(use-package savehist
  :straight t
  :after vertico
  :init
    (savehist-mode)
  :config
    (setq history-length 20))
#+end_src

#+begin_src emacs-lisp :result none
(use-package orderless
  :straight t
  :after vertico
  :init
   (setq completion-styles '(orderless)
         completion-category-defaults nil
         completion-category-overrides '((file (styles partial-completion)))))
#+end_src

* Configure =embark=
#+begin_src emacs-lisp :results none
(use-package embark
  :straight t
  :bind*
  (("C-a" . embark-act)
   ("C-," . embark-act)
   ("C->" . embark-become))

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config
  (defun embark-zeal ()
    (interactive)
    (call-process "zeal" nil 0 nil (current-word)))      
  
  (define-key embark-general-map (kbd "z") #'embark-zeal)
  (define-key embark-general-map (kbd "i") #'+embark/insert-grep-line)
  (define-key embark-symbol-map (kbd "h") #'helpful-symbol)
  (define-key embark-file-map (kbd "l") #'+embark/create-link)
  (define-key embark-file-map (kbd "e") #'+embark/open-externally)
  
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))


  (defun +embark/create-link (link)
    (let* ((beg-raw (re-search-backward " \\|^"))
           (_ (forward-char))
           (beg (if (looking-at-p " ")) (+ beg-raw 1) beg-raw)
           (end-raw (re-search-forward " \\|$"))
           (_ (backward-char))
           (end (if (looking-at-p " ") (- end-raw 1) end-raw)))

	(kill-region beg end)
      (org-insert-link link link (read-string "Description: " ""))))

  (defun +embark/open-externally (link)
    (call-process "xdg-open" nil 0 nil link))

  (require 'org-element)
  
  (defun org-link-finder ()
    (if (eq major-mode 'org-mode) 
        (let ((context (org-element-context)))
          (if (equal (org-element-type context) 'link)
              (let* ((ctx (cadr context))
                     (beg (plist-get ctx :begin))
                     (end (plist-get ctx :end))
                     (content-beg (plist-get ctx :contents-begin))
                     (content-end (plist-get ctx :contents-end))
                     (link-text (buffer-substring-no-properties
				 (or content-beg beg) (or content-end end))))
		`(link ,link-text ,beg . ,end))))))
  
  (embark-define-keymap embark-link-map
    "Keymap to work with links"
    ("o" +org-open-at-point-other-window)
    ("e" +org-link-at-point-open-externally)
    ("y" +org-copy-link-at-point))
  
  (defun +org-copy-link-at-point (_)
    (let* ((context (org-element-context))
           (ctx (cadr context))
           (link (plist-get ctx :raw-link)))
      (kill-new link)))

(defun +org-link-at-point-open-externally (_)
    (let* ((context (org-element-context))
           (ctx (cadr context))
           (link (plist-get ctx :raw-link)))
      (call-process "xdg-open" nil 0 nil link)))
  
  (defun +org-open-at-point-other-window (_)
    (let ((org-link-frame-setup '((file . find-file-other-window))))
      (org-open-at-point)))
  
  (add-to-list 'embark-target-finders 'org-link-finder)
  (add-to-list 'embark-keymap-alist '(link . embark-link-map)))

(defun +embark/insert-grep-line (line)
  (interactive "sInsert: ")
  (let* ((trimmed (s-trim (->> (s-split ":" line) (-drop 2) (s-join ":"))))
         (result (if (equal "" trimmed) line trimmed)))

    (if buffer-read-only
        (with-selected-window (other-window-for-scrolling)
          (insert result))
      (insert result))))
#+end_src

* Configure =marginalia=
#+begin_src emacs-lisp :results none
(use-package marginalia
  :straight t
  :commands (execute-extended-command)
  :init
    (marginalia-mode))
#+end_src

* Configure =consult=
#+begin_src emacs-lisp :results none
(use-package consult
  :straight t
  :defer t
  :commands (execute-extended-command consult-find consult-line)
  :init
    (setq consult-fontify-preserve t)
    (setq consult-async-min-input 1)
    (setq consult-async-refresh-delay 0.1)

    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    (advice-add #'register-preview :override #'consult-register-window)
    (advice-add #'consult-line :after (lambda (&rest r)
       (push (car consult--line-history) regexp-search-ring)))

    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    (global-set-key (kbd "C-c k") (lambda () (interactive) (consult-ripgrep default-directory)))
    (global-set-key (kbd "C-x b") #'consult-buffer)
    (global-set-key (kbd "C-s") #'consult-line) 

    (setq consult-preview-key (list (kbd "M-n") (kbd "M-p")))

  :config
    (setq consult-narrow-key "<")

    (autoload 'projectile-project-root "projectile")
    (setq consult-project-root-function #'projectile-project-root))
#+end_src

#+begin_src emacs-lisp :results none
(use-package consult-fd
  :load-path "~/.emacs.default/packages/consult-fd/"
  :defer t
  :commands (consult-fd))
#+end_src

#+begin_src emacs-lisp :results none
(use-package consult-lsp
  :straight t
  :after (consult lsp))
#+end_src

#+begin_src emacs-lisp :results none
(use-package embark-consult
  :straight t
  :after (embark consult)
  :demand t 
  :hook
    (embark-collect-mode . embark-consult-preview-minor-mode))
#+end_src

#+begin_src emacs-lisp :results none
(use-package consult-flycheck
  :straight t
  :after (consult flycheck))
#+end_src

#+begin_src emacs-lisp :results none
(use-package consult-projectile
  :load-path "~/.emacs.default/packages/consult-projectile/"
  :defer t
  :commands (consult-projectile))
#+end_src

* Configure =popper=
#+begin_src emacs-lisp :results none :tangle no
(use-package popper
  :straight t 
  :commands (popper-toggle-latest popper-toggle-type)
  :defer t
  :config
    (setq popper-display-function (lambda (b x) (display-buffer-in-direction b '(right))))
    (popper-mode +1))
#+end_src

* Languages
** Common
#+begin_src emacs-lisp :results none
(defface todo-comment-face
  '((t :foreground "#ff5555"
       :weight bold
       :underline t
       ))
  "TODO Comment Face")
#+end_src

** Dockerfile
#+begin_src emacs-lisp :results none
(use-package dockerfile-mode
  :straight t
  :defer t
  :config
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+end_src
** Python
Setup =python-mode=.
#+begin_src emacs-lisp :results none
(use-package python-mode
   :straight t
   :defer t
   :bind (:map python-mode-map
	       ("C-<backspace>" . backward-kill-word))
   :init
     (font-lock-add-keywords 'python-mode
       '(("\\(TODO\\):" 1 'todo-comment-face prepend)))
   :config

   (setq python-indent-guess-indent-offset nil)  
   (setq python-guess-indent nil)  
   (setq python-indent-offset 4)
   (setq python-indent 4)
   (setq python-indent-guess-indent-offset-verbose nil)

   (setq python-shell-interpreter "ipython"
         python-shell-interpreter-args "-i --simple-prompt --InteractiveShell.display_page=True")

   (add-hook 'python-mode-hook 
     (lambda () (push '("lambda" . "λ") prettify-symbols-alist))))
#+end_src
   
#+begin_src emacs-lisp :results none
(use-package pyvenv
  :straight t
  :defer t)
#+end_src

#+begin_src emacs-lisp :results none
(use-package blacken
  :straight t
  :hook (python-mode . blacken-mode))
#+end_src
#+begin_src emacs-lisp :results none
(use-package lsp-pyright
  :straight t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))  ; or lsp-deferred
#+end_src

#+begin_src emacs-lisp :results none
(defun +python/surround-word-with-list ()
  (interactive)
  (+core/surround-word-with "List[" "]"))

(defun +python/surround-word-with-optional ()
  (interactive)
  (+core/surround-word-with "Optional[" "]"))
#+end_src

** Protobuf
#+begin_src emacs-lisp :results none
(use-package protobuf-mode
  :straight t 
  :defer t
  :config
    (defconst my-protobuf-style
      '((c-basic-offset . 4)
       (indent-tabs-mode . nil)))
    
     (add-hook 'protobuf-mode-hook 
       (lambda () (c-add-style "my-style" my-protobuf-style t))))
#+end_src
   
** LSP
#+begin_src emacs-lisp :results none
(use-package lsp-mode
   :straight t
   :hook ((python-mode . lsp-deferred)
          (typescript-mode . lsp-deferred)  
          (c-mode . lsp-deferred)
          (sh-mode . lsp-deferred))
   :custom
         (lsp-headerline-breadcrumb-enable nil)
         (lsp-diagnostic-clean-after-change t)
   :init
         (setq lsp-keymap-prefix "C-c l")
   :config
         (setq lsp-completion-provider :none)
         (setq lsp-prefer-flymake nil)
         (lsp-enable-which-key-integration t)
         (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
         (lsp-define-conditional-key lsp-command-map "ss" lsp "start server" t)
   :bind (
         (:map lsp-command-map
           ("a" . lsp-execute-code-action)
           ("f" . +lsp/fill-signature))
         (:map evil-normal-state-map 
           ("C-t" . lsp-signature-activate)
           ("M-w" . +lsp-ui/toggle-doc-focus)          
           ("C-<return>" . lsp-execute-code-action))
         (:map evil-insert-state-map
           ("C-l l f" . +lsp/fill-signature)
           ("C-t" . lsp-signature-activate)
           ("C-<return>" . lsp-execute-code-action))))
#+end_src

#+begin_src emacs-lisp :results none
(use-package lsp-ui
  :straight t
  :after lsp-mode
  :config 
    (setq lsp-ui-doc-use-childframe nil)
    (setq lsp-ui-doc-enable nil)
    (add-to-list 'lsp-ui-doc-frame-parameters '(no-accept-focus . t)))
#+end_src

#+begin_src emacs-lisp :results none
(use-package lsp-metals
  :straight t
  :after (lsp-mode scala-mode))
#+end_src

#+begin_src emacs-lisp :results none
(defun +lsp-ui/toggle-doc-focus ()
  (interactive)
  (if (lsp-ui-doc--visible-p)
      (lsp-ui-doc-focus-frame)
      (lsp-ui-doc-unfocus-frame)))
#+end_src

#+begin_src emacs-lisp :results none
(defun +lsp/current-param-lookup ()
  (interactive)
  (let* ((beg (save-excursion (backward-up-list) (right-char) (point)))
         (end (save-excursion (up-list) (left-char) (point)))
         (region-str (s-trim (buffer-substring-no-properties beg end)))
         (param-strs (mapcar (lambda (p) (s-trim p)) (s-split "," region-str)))
         (lookup (mapcar (lambda (p) (s-split " = " p)) param-strs)))

    lookup))

(defun +lsp/fill-signature--clean ()
  (let* ((beg (save-excursion (backward-up-list) (right-char) (point)))
         (end (save-excursion (up-list) (left-char) (point))))
    (kill-region beg end)))

(defun +lsp/fill-signature--param-value (name lookup)
  (s-concat
     name
     " = "
     (or (nth 1 (assoc name lookup)) "???")
      ","))

(defun +lsp/fill-signature--handle (signature)
  (let* ((signatures (gethash "signatures" signature))
         (signature (elt signatures 0))
         (params (gethash "parameters" signature))
         (labels (mapcar (lambda (p) (gethash "label" p)) params))
         (label-names (mapcar (lambda (l) (s-replace "<" "" (car (s-split ":" l)))) labels))
         (lookup (+lsp/current-param-lookup)))

    (+lsp/fill-signature--clean)
    
    (insert
      (s-concat
        "\n"
        (s-join "\n" (mapcar (lambda (n) (+lsp/fill-signature--param-value n lookup)) label-names))
        "\n"))))

(defun +lsp/fill-signature ()
  (interactive)
  (if (and lsp--signature-last-buffer
          (not (equal (current-buffer) lsp--signature-last-buffer)))
      (lsp-signature-stop)
      (lsp-request-async "textDocument/signatureHelp"
                      (lsp--text-document-position-params)
                      #'+lsp/fill-signature--handle
                      :cancel-token :signature)))
#+end_src

#+begin_src emacs-lisp :results none
(defun +lsp/references ()
  (interactive)
  (let ((loc (lsp-request "textDocument/references"
                          ((lsp--text-document-position-params) (list :context `(:includeDeclaration nil))))))
     ((lsp--locations-to-xref-items loc))))
#+end_src

#+begin_src emacs-lisp :results none
(defun +lsp/consult-errors ()
  (interactive)

  (eval-expr 'lsp-diagnostics))
#+end_src

#+begin_src emacs-lisp :results none
(defun +lsp/lsp-select-log-level()
  (interactive)
  (let* ((level-string (ivy-read "Lsp log level" '("ERROR" "WARN" "INFO" "DEBUG")))
         (severity  (pcase level-string
                      (`"ERROR" 1)
                      (`"WARN" 2)
                      (`"INFO" 3)
                      (`"DEBUG" 5))))
    (when severity
      (setq lsp-treemacs-error-list-severity severity))
    (call-interactively 'lsp-treemacs-errors-list)))
#+end_src

Remove other LSP sessions.
#+begin_src emacs-lisp :results none
(defun +lsp/remove-other-sessions ()
    (interactive)
    (-each 
        (-remove-item
            (lsp-find-session-folder (lsp-session) default-directory)
            (lsp-session-folders (lsp-session)))
        #'lsp-workspace-folders-remove))
#+end_src
   
#+begin_src emacs-lisp :results none
(defun +lsp-treemacs/remove-session-at-point ()
  (interactive)
  (let ((file (button-get (treemacs-node-at-point) :key)))
    (lsp-workspace-folders-remove file)))
#+end_src

** Scala
scala-mode
#+begin_src emacs-lisp :results none
(use-package scala-mode
  :straight t
  :mode "\\.s\\(cala\\|bt\\)$"
  ;; :hook (scala-mode . lsp-deferred)
  :hook (scala-mode . lsp)
  :bind (:map scala-mode-map
        ("C-c C-c" . +scala/dwim-at-point))
  :config
    (font-lock-add-keywords 'scala-mode
      '(("\\(TODO\\):" 1 'todo-comment-face prepend)
        ("\\(NOTE\\):" 1 'bookmark-face prepend))))
#+end_src

sbt-mode
#+begin_src emacs-lisp :results none
(use-package sbt-mode
  :straight t
  :after scala-mode
  :commands sbt-start sbt-command
  :config
    (substitute-key-definition
       'minibuffer-complete-word
       'self-insert-command
        minibuffer-local-completion-map)

    (setq sbt:program-options '("-Dsbt.supershell=false")))
#+end_src

#+begin_src emacs-lisp :results none
(defun +scala/copy-import ()
    (interactive)
    (setq import
      (replace-regexp-in-string "package" "import"
      (concat
        (car (split-string (buffer-string) "\n"))
        "."
        (thing-at-point 'word))))

    (message "Copied: %s" import)
    (kill-new import))
#+end_src

#+begin_src emacs-lisp :results none
(defun +scala/match-imports ()
  (interactive)

  (ace-window nil)

  (let ((pos 0)
        (imports nil)
        (content (buffer-substring-no-properties (point-min) (point-max))))

    (while (string-match "^import.*" content pos)
      (setq pos (match-end 0))

      (let ((import (match-string 0 content)))
        (push import imports)))

    (ace-window nil)

    (beginning-of-buffer)
    (forward-line)

    (insert "\n")
    (dolist (import imports)
      (insert import)
      (insert "\n"))))
#+end_src

#+begin_src emacs-lisp :results none
(defun +scala/insert-package ()
  (interactive)

  (let* ((candidate-file (car (directory-files default-directory nil "^[^#]*\\.scala")))
	 (path (concat default-directory candidate-file))
         (package (with-current-buffer
       	    (or (get-file-buffer path)
       	        (find-file-noselect path))
       
               (buffer-substring-no-properties
       		   (progn (beginning-of-buffer) (point))
       		   (progn (next-line) (point))))))

    (beginning-of-buffer)
    (insert package)))
#+end_src

#+begin_src emacs-lisp :results none
(defun +scala/make-s-string ()
  (interactive)
  (save-excursion
    (evil-find-char-backward 1 ?\")
    (insert "s")))
#+end_src

#+begin_src emacs-lisp :results none
(defun +scala/def-in-file ()
  (interactive)
  (consult-line "def "))
#+end_src

#+begin_src emacs-lisp :results none
(defun +scala/surround-word-with-list ()
  (interactive)
  (+core/surround-word-with "List[" "]"))

(defun +scala/surround-word-with-try ()
  (interactive)
  (+core/surround-word-with "Try[" "]"))
  
(defun +scala/surround-word-with-option ()
  (interactive)
  (+core/surround-word-with "Option[" "]"))
  
(defun +scala/surround-word-with-future ()
  (interactive)
  (+core/surround-word-with "Future[" "]"))

(defun +scala/surround-word-with-future-successful ()
  (interactive)
  (+core/surround-word-with "Future.successful(" ")"))
  
(defun +scala/surround-word-with-io ()
  (interactive)
  (+core/surround-word-with "IO[" "]"))
#+end_src

#+begin_src emacs-lisp :results none
(defun +scala/dwim-at-point ()
  (interactive)
 
  (let ((word
           (save-excursion
             (beginning-of-line)
             (current-word))))

      (if (equal word "package")
	  (+scala/package-to-import)
	  (+scala/complete-type-param))))
  
(defun +scala/package-to-import ()
  (interactive)

  (beginning-of-line)
  (kill-word 1)
  (insert "import")
  (end-of-line)
  (delete-char -1))
    
(defun +scala/complete-type-param ()
  (interactive)

  (let ((arg-name (buffer-substring-no-properties
		   (progn (backward-word) (point))
		   (progn (forward-word) (point)))))
    (insert (concat ": "
                    (upcase (substring arg-name 0 1))
                    (substring arg-name 1 nil)
                    ","))))
#+end_src

#+begin_src emacs-lisp :results none
(defun +scala/declaration-to-assignment ()
  (interactive)
  (evil-ex (concat "'<,'>" "s/" "\\(\\w+\\):.*" "/" "\\1 = \\1,")))
#+end_src

#+begin_src emacs-lisp :results none
(defun +scala/name-parameters ()
  (interactive)
  (evil-ex (concat "'<,'>" "s/" "\\w+\\.\\(\\w+\\)" "/" "\\1 = \\0")))
#+end_src

#+begin_src emacs-lisp :results none
(defun +scala/reverse-pattern-match ()
  (interactive)
  (evil-ex (concat "'<,'>" "s/" "case \\(.*\\) => \\(.*\\)" "/" "case \\2 => \\1")))
#+end_src

#+begin_src emacs-lisp :results none
(defun +scala/replace-with-filename ()
  (interactive)
  (let ((path (buffer-file-name)))
    (string-match ".*/\\(.*\\)\\.scala" path)
    (left-word 1)
    (kill-word 1)
    (insert (substring path (match-beginning 1) (match-end 1)))))
#+end_src

#+begin_src emacs-lisp :results none
(defun +scala/goto (path)
  (interactive)

  (require 's)
  (let* ((project-root (file-name-as-directory (projectile-project-root)))
         (root (s-chop-suffix "project/" project-root))
         (path (concat (file-name-as-directory root) path)))
    (find-file path)))
#+end_src

#+begin_src emacs-lisp :results none
(defun +scala/fill-imports-from-side-buffers ()
  (interactive)

  (let* ((errors (-map #'flycheck-error-message flycheck-current-errors))
         (not-found (-filter (apply-partially #'s-starts-with? "not found:")  errors))
         (symbols (-map (-compose #'car (apply-partially #'-take-last 1) (apply-partially #'s-split " ")) not-found))
         (visible-buffers (-filter (lambda (b): (not (equal (buffer-name b) (buffer-name (current-buffer))))) (mapcar 'window-buffer (window-list)))))

    (print visible-buffers)))
#+end_src

#+begin_src emacs-lisp :results none
(defvar +scala/common-imports
  '("import scala.concurrent.duration._"
    "import cats.instances.future.catsStdInstancesForFuture"
    "import cats.instances.list.catsStdInstancesForList"
    "import cats.syntax.flatMap._"
    "import cats.syntax.functor._"
    "import cats.syntax.bifunctor._"
    "import cats.syntax.traverse._"
    "import cats.syntax.monad._"
    "import cats.syntax.applicativeError._"
    "import cats.syntax.monadError._"
    "import cats.syntax.applicative._"
    "import cats.syntax.apply._"))

(defun +scala/insert-common-import (import)
  (interactive
   (list
    (completing-read " " +scala/common-imports)))

  (save-excursion 
    (goto-line 2)
    (move-to-column 1)
    (newline)
    (insert import)))
#+end_src

#+begin_src emacs-lisp :results none
(defun +scala/used-proto ()
  (interactive)

  (with-current-buffer (find-file-noselect (concat (projectile-project-root) "build.sbt"))
    (let ((pos 0)
          (paths nil)
          (content (buffer-substring-no-properties (point-min) (point-max))))

      (while (string-match "baseDirectory\\.value \\(.*\\)" content pos)
        (setq pos (match-end 0))

        (let* ((match (match-string 1 content))
               (path (substring (s-replace-all '(("," . "") (" " . "") ("\"" . "")) match) 1)))
          (push path paths)))

      (let ((choice (completing-read " " paths)))
        (if choice
            (find-file (concat (projectile-project-root) choice)))))))
#+end_src

** Yaml
#+begin_src emacs-lisp :results none
(use-package yaml-mode 
  :straight t
  :defer t)
#+end_src

** SQL
#+begin_src emacs-lisp :results none
(defun +sql/align ()
  (interactive)
  (let ((rule
	 (list (list nil
		     (cons 'regexp  "\\(\\s-*\\)\\(VARCHAR\\|NOT NULL\\|TIMESTAMP\\)")
		     (cons 'group 1)
		     (cons 'bogus nil)
		     (cons 'spacing 3)
		     (cons 'repeat t)))))
    (align-region (region-beginning) (region-end) 'entire rule nil nil)))
#+end_src

** Elisp
#+begin_src emacs-lisp :results none
(use-package emacs
  :straight nil
  :bind
    (:map emacs-lisp-mode-map
      ("C-c i" . indent-region))
  :config
    (font-lock-add-keywords 'emacs-lisp-mode
          		  '(("\\(TODO\\):" 1 'todo-comment-face prepend)))

    (add-hook 'emacs-lisp-mode-hook 
              (lambda () (progn
          		 (push '("lambda" . "λ") prettify-symbols-alist)
          		 (prettify-symbols-mode 1)))))
#+end_src

** Scheme
#+begin_src emacs-lisp :results none
(use-package geiser
  :straight t 
  :defer t
  :config 
    (setq geiser-active-implementations '(guile)))
#+end_src

** askell
#+begin_src emacs-lisp :results none :tangle no
(use-package haskell-mode
  :straight t
  :diabled
  :defer t
  :config
    (flycheck-haskell-setup))
#+end_src


#+begin_src emacs-lisp :results none :tangle no
(use-package flycheck-haskell
  :straight t
  :defer t
  :disabled
  :commands flycheck-haskell-setup)
#+end_src

** ReasonML
#+begin_src emacs-lisp :results none :tangle no
(use-package reason-mode
  :straight t
  :defer t
  :mode "\\.rei?$"
  :config 
  (require 'lsp-mode)
  (setq lsp-response-timeout 180)
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection "/usr/bin/reason-language-server")
                    :major-modes '(reason-mode)
                    :notification-handlers (ht ("client/registerCapability" 'ignore))
                    :priority 1
                    :server-id 'reason-ls)))
#+end_src

** JavaScript
#+begin_src emacs-lisp :results none
(use-package js-mode
  :straight nil
  :defer t
  :config
    (font-lock-add-keywords 'js-mode
       '(("\\(TODO\\):" 1 'todo-comment-face prepend))))
#+end_src

#+begin_src emacs-lisp :results none
(use-package prettier-js
  :straight t
  :hook (js-mode . prettier-js-mode) 
  :defer t
  :config
    (setq js-indent-level 2))
#+end_src

** Rust
#+begin_src emacs-lisp :results none :tangle no
(use-package rust-mode
  :disabled
  :straight t
  :init
    (setq rust-format-on-save t)
  :hook ((rust-mode . lsp-deferred)))
#+end_src

** TypeScript
#+begin_src emacs-lisp :results none
(use-package typescript-mode
  :straight t
  :mode "\\.\\(ts\\|tsx\\)$"
  :hook (typescript-mode . prettier-js-mode))
#+end_src

** GraphQL
#+begin_src emacs-lisp :results none
(use-package graphql-mode
  :straight t
  :defer t)
#+end_src

#+begin_src emacs-lisp :results none
(use-package request
  :straight t
  :defer t)
#+end_src

** PlantUML
#+begin_src emacs-lisp :results none
(use-package plantuml-mode
  :straight t
  :defer t 
  :config
    (setq plantuml-jar-path "/home/porcupine/tools/plantuml.jar")
    (setq plantuml-default-exec-mode 'jar))
#+end_src

** tree-sitter
#+begin_src emacs-lisp :results none
(use-package tree-sitter
  :straight t
  :defer t)
#+end_src

#+begin_src emacs-lisp :results none
(use-package tree-sitter-langs
  :straight t
  :defer t)
#+end_src

** Fish
#+begin_src emacs-lisp :results none
(use-package fish-mode
  :straight t
  :defer t
  :mode "\\.fish$")
#+end_src

** Nix
#+begin_src emacs-lisp :results none
(use-package nix-mode
  :straight t
  :mode "\\.nix$")
#+end_src

** Elastic
#+begin_src emacs-lisp :results none
(use-package es-mode 
  :straight t
  :defer t)
#+end_src

* Configure =dumb-jump=
#+begin_src emacs-lisp :results none
(use-package dumb-jump
  :straight t
  :init
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src

* Configure =direnev=
#+begin_src emacs-lisp :results none
;; (use-package direnv
;;  :straight t
;;  :config
;;    (setq direnv-always-show-summary nil)
   
;;    (direnv-mode))

(use-package envrc
  :straight t
  :init
    (envrc-global-mode))
#+end_src

* Configure =Info=
#+begin_src emacs-lisp :results none
(use-package info
  :straight nil
  :defer t
  :config
    (evil-collection-define-key 'normal 'Info-mode-map
        (kbd "gt") #'persp-next
        (kbd "gT") #'persp-prev))
  ;; :bind (:map evil-normal-state-map
  ;;   ("RET" . 'Info-follow-nearest-node)))
#+end_src

* Configure =smartparens=
#+begin_src emacs-lisp :results none
(use-package smartparens
  :straight t
  :hook (prog-mode . smartparens-mode)
  :config
    (smartparens-global-mode t)
    (show-smartparens-global-mode t)
    ;; (smartparens-global-strict-mode t)
  :bind (:map smartparens-mode-map
    ("M-l" . sp-forward-slurp-sexp)
    ("M-h" . sp-forward-barf-sexp)
    ("M-S-l" . sp-backward-slurp-sexp)
    ("M-S-h" . sp-backward-barf-sexp)))

(use-package evil-smartparens
  :straight t
  :after smartparens
  :hook (smartparens-mode . evil-smartparens-mode)
  :config
    (define-key global-map (kbd "<M-l>") nil)
    (require 'smartparens-config))
#+end_src

* Configure =csv-mode=
#+begin_src emacs-lisp :results none
(use-package csv-mode
  :straight t
  :defer t)
#+end_src

* Configure =eshell=
#+begin_src emacs-lisp :results none
(use-package eshell
  :straight nil 
  :defer t
  :hook (eshell-first-time-mode . +eshell/configure-eshell)
  :config
    (company-mode -1)

    (defalias 'e "find-file-other-window $1")
    (defalias 'gs "git status")

    (defun +eshell/clear ()
      (interactive)
      (eshell/clear 1)
      (eshell-send-input)
      (evil-insert nil))

    (defun +eshell/open-in-default ()
      (interactive)
      (let ((current-dir default-directory))
        (eshell)
        (eshell/cd current-dir)
        (+eshell/clear)))

    (defun +eshell/open-in-project-root ()
      (interactive)
      (eshell)
      (eshell/cd (projectile-project-root))
      (+eshell/clear))

    (defun +eshell/configure-eshell ()
      ;; (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
      (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-l") '+eshell/clear)
      (evil-normalize-keymaps)

      (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

      (company-mode -1)

      (setq eshell-history-size              10000
            eshell-buffer-maximum-lines      10000
            eshell-hist-ignoredups           t
            eshell-scroll-to-bottom-on-input t)))
#+end_src

* Configure =vterm=
#+begin_src emacs-lisp :results none
(use-package vterm
  :straight t
  :defer t
  :config 
   (setq vterm-buffer-name-string "vterm - %s"))
#+end_src

#+begin_src emacs-lisp :results none
(defun +vterm/new-session ()
  (interactive)
  (vterm))

(defun +vterm/focus-or-create () 
  (interactive)

  (let ((vterm-buffers (-filter
  			(lambda (b) (s-starts-with-p "vterm" b))
  			(-map 'buffer-name (buffer-list)))))
    
    (cond
     ((= (length vterm-buffers) 0) (+vterm/new-session))
     ((= (length vterm-buffers) 1) (switch-to-buffer (car vterm-buffers)))
     (t (switch-to-buffer (completing-read "Choose: " vterm-buffers))))))
#+end_src

* Configure =elfeed=
#+begin_src emacs-lisp :results none 
(use-package elfeed
  :straight t
  :defer t
  :commands
    (elfeed)
  :custom
    (elfeed-search-remain-on-entry t)
  :config
    (load-file "~/.emacs.default/packages/pelfeed.el")
    (p/elfeed-setup)

    (setq-default elfeed-search-filter "@6-months-ago +unread")

    (evil-collection-define-key 'normal 'elfeed-search-mode-map
      (kbd "RET") 'p/elfeed-show-entry
      ;; TODO: use general for that?
      "d" 'p/fetch-arxiv-paper
      "N" 'p/elfeed-roam-note
      "b" 'p/elfeed-browse-url
      "R" 'elfeed-update))
      #+end_src

#+begin_src emacs-lisp :results none 
(use-package elfeed-score
  :straight t
  :after elfeed
  :config
    (elfeed-score-enable)
    (define-key elfeed-search-mode-map "=" elfeed-score-map))
#+end_src
  
* Configure =winner=
#+begin_src emacs-lisp :results none
(use-package winner
  :straight nil
  :defer 10
  :config 
    (winner-mode))
#+end_src

* Configure =string-inflection=
#+begin_src emacs-lisp :results none
(use-package string-inflection 
  :straight t
  :defer t)
#+end_src

* Configure =eval-expr=
#+begin_src emacs-lisp :results none
(use-package eval-expr
   :straight t
   :defer t)
#+end_src

* Configure =synosaurus=
#+begin_src emacs-lisp :results none
(use-package synosaurus
  :straight t
  :defer t)
#+end_src

* Configure =pdf-tools=
#+begin_src emacs-lisp :results none 
(use-package pdf-tools
  :straight t
  :defer t
  :mode "\\.pdf$"
  :init
    (pdf-loader-install)
  :config 
    (setq pdf-view-midnight-colors '("#839496" . "#1c2128")) 
    ;; (pdf-tools-install)
    (add-hook 'pdf-view-mode-hook #'+pdf/setup)

    (add-hook 'pdf-view-mode-hook
      (lambda ()
        (setq cursor-in-non-selected-windows nil)))
        ;; TODO: need to find a way to disable it
        ;; (internal-show-cursor nil nil))

    (defun +pdf/open-externally ()
      (interactive)
      (call-process "xdg-open" nil 0 nil (buffer-file-name)))

    (defun +pdf/setup ()
      (evil-collection-define-key 'normal 'pdf-view-mode-map
        "ge" #'+pdf/open-externally)

      (pdf-tools-install)
      (hide-mode-line-mode)))
#+end_src

* Configure =olivetti=
#+begin_src emacs-lisp :results none
(use-package olivetti
  :straight t
  :defer t
  :config 
    (custom-set-variables '(olivetti-body-width 120))
    (custom-set-variables '(olivetti-recall-visual-line-mode-entry-state t)))
#+end_src

#+begin_src emacs-lisp :results none
(use-package hide-mode-line
  :straight t 
  :defer t)
#+end_src

* Configure =eros=
#+begin_src emacs-lisp :results none
(use-package eros
  :straight t
  :defer t
  :hook (emacs-lisp-mode . eros-mode))
#+end_src

* Configure =tramp=
#+begin_src emacs-lisp :results none
(use-package tramp
  :straight nil
  :defer t
  :config
    (setq tramp-default-method "rsync"))
#+end_src

* Configure =delight=
#+begin_src emacs-lisp :results none
(use-package delight
  :straight t
  :defer t
  :config
    (delight '((conf-windows-mode "" ""))))
#+end_src

* Configure =org-jira=
#+begin_src emacs-lisp :results none
(use-package org-jira
  :defer t
  :straight (org-jira :type git :host github :repo "Porcupine96/org-jira" :branch "master")
  :commands (org-jira-get-issues)
  :init
    (setq org-jira-working-dir "~/.org-jira")
  :config
    (setq org-element-use-cache nil) ;; hanging emacs issue: https://github.com/ahungry/org-jira/issues/275

    (setq jiralib-url "https://chatbotize.atlassian.net")
    (setq org-jira-verbosity 'info)
    (setq org-jira-jira-status-to-org-keyword-alist
      '(("In Progress" . "STRT")
        ("In Review" . "REVIEW")
        ("In Test" . "WAIT")
        ("Blocked" . "WAIT")
        ("Scheduled for deployment" . "WAIT")))
  
    (setq org-jira-default-jql "project = DEVS and assignee = currentUser() and status != Done ORDER BY\n  priority DESC, created ASC")
  
    (setq org-jira-custom-jqls
      '(
        (:jql " project = DEVS and assignee = currentUser() and status in (TODO, 'In Progress') ORDER BY\n  status DESC, created ASC "
         :filename "DEVS-working-on")))

(defun +org-jira/get-issues ()
  (interactive)

  (let ((path (concat org-jira-working-dir "/DEVS.org")))
    (with-current-buffer
	(or (get-file-buffer (concat (projectile-project-root) path))
          (find-file-noselect (concat (projectile-project-root) path)))

      (erase-buffer))
      (call-interactively #'org-jira-get-issues))))
#+end_src

* Configure =svg-lib=
#+begin_src emacs-lisp :results none
(use-package svg-lib
 :straight t
 :defer t)
#+end_src

* Configure =origami-mode=
#+begin_src emacs-lisp :results none
(use-package origami
  :straight t
  :defer t
  :hook (js-mode . origami-mode))
#+end_src

* Configure =mu4e=
#+begin_src emacs-lisp :results none
(use-package mu4e
  :straight nil
  :load-path "~/.nix-profile/share/emacs/site-lisp/mu4e"

  :config 
    (setq mu4e-change-filenames-when-moving t)
    (setq mu4e-update-interval 60)
    (setq mu4e-hide-index-messages t)
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/.mail")

    (setq mu4e-drafts-folder "/[Gmail]/Drafts")
    (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
    (setq mu4e-refile-folder "/[Gmail]/All Mail")
    (setq mu4e-trash-folder  "/[Gmail]/Trash")

    (setq mu4e-maildir-shortcuts
        '(("/gmail/Inbox"       . ?i)
          ("/[Gmail]/Sent Mail" . ?s)
          ("/[Gmail]/Trash"     . ?t)
          ("/[Gmail]/Drafts"    . ?d)
          ("/[Gmail]/All Mail"  . ?a)))

    (setq user-mail-address "lukasz.kazmierczak@zowie.ai")
    (setq user-full-name "Łukasz Kaźmierczak")

    (setq smtpmail-smtp-server "smtp.gmail.com")
    (setq smtpmail-smtp-service 587)
    (setq smtpmail-stream-type 'starttls)

    (setq message-send-mail-function 'smtpmail-send-it))
#+end_src

#+begin_src emacs-lisp :results none :tangle no
(use-package mu4e-alert
  :straight t
  :disabled
  :config 
    (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display))
#+end_src

* Configure =general=
#+begin_src emacs-lisp :results none
(use-package general
  :straight t
  :init
  (setq general-override-states '(insert
                                  emacs
                                  hybrid
                                  normal
                                  visual
                                  motion
                                  operator
                                  replace))
  :config
  (general-create-definer leader-def 
    :prefix "SPC")
  
  (leader-def
    :states '(normal visual motion)
    :keymaps 'override
    "a a" #'org-agenda
    "a c" #'open-calendar
    "a w" #'+agenda/weekly-agenda
    "a d" #'+agenda/daily-agenda
    "a t" #'+agenda/filter-by-tag
    "a h" #'+agenda/filter-by-tag-hot
    
    "b a" #'bookmark-set
    "b b" #'consult-bookmark
    "b c" (lambda () (interactive) (switch-to-buffer "*compilation*"))
    "b n" #'next-buffer
    "b s" #'+core/summon-scratch
    "b N" #'+core/scratch-buffer
    "b p" #'previous-buffer
    "b k" #'kill-current-buffer
    
    "c e" #'consult-flycheck
    "c E" #'consult-compile-error
    "c x" #'flycheck-list-errors
    "c c" #'compile
    "c C" #'recompile

    "d" #'hydra-dired-bookmarks/body

    "e e" #'elfeed
    "e d" #'ediff
    
    "f f" #'find-file
    "f r" #'consult-recent-file
    "f i" (lambda () (interactive)(find-file "~/Dropbox/org/todo/inbox.org"))
    "f j" (lambda () (interactive)(find-file "~/Dropbox/org/todo/work-journal.org"))
    "f w" (lambda () (interactive)(find-file "~/Dropbox/org/todo/work.org"))
    "f W" (lambda () (interactive)(find-file "~/Dropbox/org/work/work.org"))
    "f p" (lambda () (interactive)(find-file "~/Dropbox/org/todo/private.org"))
    "f P" (lambda () (interactive)(find-file "~/.config/polybar"))
    "f e" (lambda () (interactive)(find-file "~/Dropbox/org/resources/resources.org"))
    "f C" (lambda () (interactive)(find-file "~/Dropbox/org/knowledge/cheatsheet.org"))
    "f D" (lambda () (interactive)(find-file "~/Dropbox/org/todo/dictionary.org"))
    "f s" (lambda () (interactive)(find-file "~/Dropbox/org/todo/studies.org"))
    "f S" (lambda () (interactive)(find-file "~/dotfiles/scripts"))
    "f d" (lambda () (interactive)(dired "~/dotfiles"))
    "f c" (lambda () (interactive)(find-file "~/.emacs.default/configuration.org"))
    "f n" (lambda () (interactive)(find-file "~/dotfiles/config/nix/home.nix"))
    "f t" (lambda () (interactive)(find-file "~/.emacs.default/themes/noctilux-theme.el"))
    "f x" (lambda () (interactive)(find-file "~/.config/i3/config"))
    
    "g b" #'magit-branch
    "g g" #'magit-status
    "g i" #'magit-init
    "g p" #'magit-push
    "g r" #'hydra-forge/body
    "g t" #'git-timemachine
    "g m" #'man
    
    "h b" #'counsel-descbinds
    "h k" #'helpful-key
    "h f" #'helpful-function
    "h F" #'describe-face
    "h v" #'helpful-variable
    "h p" #'helpful-package
    "h m" #'describe-mode
    "h M" #'helpful-macro
    "h e" #'view-echo-area-messages
    "h l" #'find-library
    
    "k" #'consult-yank-from-kill-ring
    
    "l b" #'lsp-metals-build-import
    "l d" #'lsp-find-definition
    "l s" #'lsp-describe-session
    "l e" #'lsp-ui-flycheck-list
    "l f" #'lsp-format-buffer
    "l l" #'consult-lsp-symbols
    "l t" #'hydra-lsp-toggle/body
    "l T" #'lsp-treemacs-errors-list
    ;; "l r" #'lsp-ui-peek-find-references
    "l r" #'lsp-find-references
    "l R" #'lsp-rename
    "l x" #'+lsp/remove-other-sessions
    "l i" #'lsp-goto-implementation
    "l I" #'+scala/copy-import
    
    "o c" #'cfw:open-org-calendar
    "o p" #'treemacs
    "o e" #'eshell
    "o E" #'+eshell/open-in-default
    "o P" #'+eshell/open-in-project-root
    "o o" #'p/focus-mode
    "o v" #'+vterm/focus-or-create
    "o V" #'+vterm/new-session
    "o m" #'mu4e
    "o w" #'+eww/browse-url
    "o j" #'+org-jira/get-issues
    
    "p a" #'projectile-add-known-project
    "p c" #'projectile-compile-project
    "p C" #'projectile-repeat-last-command
    "p f" (lambda () (interactive) (consult-ripgrep (projectile-project-root)))
    "p p" #'consult-projectile
    "p i" #'projectile-invalidate-cache
    "p t" #'treemacs-add-and-display-current-project
    "p T" #'+projectile/search-todos
    "p s" #'projectile-save-project-buffers
    "p w" #'+projectile/search-word-under-cursor
    
    "r h" #'evil-window-decrease-width
    "r l" #'evil-window-increase-width
    
    "s m" #'+work/consult-monorepo
    "s M" #'+work/consult-monorepo-glob
    "s f" #'+work/consult-find-file-monorepo
    
    "t r" #'+core/reload-theme
    "t e" #'treemacs-display-current-project-exclusively
    
    "u" #'universal-argument
    
    "w u" #'winner-undo
    "w r" #'winner-redo
    "w f" #'+core/to-floating-frame
    "w l" #'+core/to-regular-right-window
    "w j" #'+core/to-regular-bottom-window
    
    "y a" #'yas-new-snippet
    "y v" #'yas-visit-snippet-file
    "y c" #'company-yasnippet
    "y p" #'+core/copy-file-path
    
    "RET" #'consult-bookmark
    "`" #'popper-toggle-type
    
    "TAB c" #'persp-switch
    "TAB d" #'persp-kill
    "TAB n" (lambda () (interactive) (persp-switch (generate-new-buffer-name "workspace")))
    "TAB k" #'persp-kill
    "TAB r" #'persp-rename
    "TAB TAB" #'persp-switch
    
    "SPC" (lambda () (interactive) (consult-fd (projectile-project-root)))
    "," #'consult-projectile)

  (general-create-definer local-leader-def
    :prefix "SPC m")

  (local-leader-def
    :states 'normal
    :keymaps 'org-mode-map
    "o" #'+ocr/screenshot
    "r" #'rsvp/read-from-ocr
    "R" #'rsvp/read-last-content
    "s" #'org-schedule
    "S" #'pscreenshot/org-screenshot-take
    "d" #'org-deadline
    "p" #'p/force-publish-current-file
    "P" #'p/show-current-currently-published-file
    "i" #'+org/save-image-insert-link
    "t" #'org-todo)

  (local-leader-def
    :states 'normal
    :keymaps 'yaml-mode-map
    "u" #'+work/update-versions)
  
  (local-leader-def
    :states 'normal
    :keymaps 'text-mode-map
    "o" #'+ocr/screenshot)

  (local-leader-def
    :states 'normal
    :keymaps 'scala-mode-map
    "i" #'+scala/copy-import
    "y" #'+scala/fill-imports-from-side-buffers
    "s" #'hydra-scala-surround/body
    "l" #'+scala/insert-common-import
    "d" #'+scala/def-in-file
    "p" #'+scala/insert-package
    "c b" (lambda () (interactive) (+projectile/compile "sbt bloopInstall"))
    "c c" (lambda () (interactive) (+projectile/compile "bl"))
    "c p" (lambda () (interactive) (+projectile/compile "protob"))
    "c n" (lambda () (interactive) (+projectile/compile "bl -n"))
    "c r" (lambda () (interactive) (+projectile/compile "bl -r"))
    "c t" (lambda () (interactive) (+projectile/compile "bl -t"))
    "g b" (lambda () (interactive) (+scala/goto "build.sbt"))
    "g d" (lambda () (interactive) (+scala/goto "project/Dependencies.scala"))
    "g v" (lambda () (interactive) (+scala/goto "project/DependencyVersions.scala"))
    "g p" (lambda () (interactive) (+work/goto-proto))
    "g u" (lambda () (interactive) (+scala/used-proto)))

  (general-def :states 'normal :keymaps 'dired-mode-map "SPC" nil)

  (local-leader-def
    :states 'normal
    :keymaps 'dired-mode-map
    "g b" (lambda () (interactive) (+scala/goto "build.sbt"))
    "g d" (lambda () (interactive) (+scala/goto "project/Dependencies.scala"))
    "g v" (lambda () (interactive) (+scala/goto "project/DependencyVersions.scala"))
    "g p" (lambda () (interactive) (+work/goto-proto)))

  (local-leader-def
    :states 'normal
    :keymaps 'protobuf-mode-map
    "g b" (lambda () (interactive) (+scala/goto "build.sbt"))
    "g d" (lambda () (interactive) (+scala/goto "project/Dependencies.scala"))
    "g v" (lambda () (interactive) (+scala/goto "project/DependencyVersions.scala")))

  (local-leader-def
    :states 'normal
    :keymaps 'rust-mode-map
    "c c" #'rust-compile
    "c r" #'rust-run)

  (local-leader-def
    :states 'normal
    :keymaps 'python-mode-map
    "s" #'run-python
    "s" #'hydra-python-surround/body)

  (general-define-key 
   :prefix "SPC j"
   :states 'normal
   :keymaps 'org-mode-map
   "a" (lambda () (interactive) (jupyter-org-insert-src-block nil current-prefix-arg))
   "b" (lambda () (interactive) (jupyter-org-insert-src-block t current-prefix-arg))
   "x" #'jupyter-org-kill-block-and-results
   "c" #'org-babel-remove-result
   "j" #'org-babel-next-src-block
   "k" #'org-babel-previous-src-block
   "r" #'jupyter-run-repl
   "E" #'jupyter-org-execute-to-point)

  (general-define-key 
   :states '('normal 'insert)
   :keymaps '(evil-org-mode-map org-mode-map)
   "C-<return>" '+org/c-ret-dwim
   "S-<return>" '+org/s-ret-dwim
   "C-S-<return>" '+org/c-s-ret-dwim
   "C-M-<return>" '+org/c-m-ret-dwim)

  (general-define-key 
   :states '('normal)
   :keymaps '(evil-org-mode-map org-mode-map)
   "C-<return>" '+org/c-ret-dwim
   "<return>" '+org/ret-dwim))
#+end_src

* Work
#+begin_src emacs-lisp :results none
(defconst +work/monorepo-path "~/work/monorepo")

(defun update-monorepo-path ()
  (interactive)
  
  (setq +work/monorepo-path
	(completing-read "" '("~/work/monorepo" "~/work/monorepo-email-automation"))))

(defun +work/proto-paths ()
  `(("ai" ,(concat +work/monorepo-path "/ai/ai-protobufs"))
    ("creator" ,(concat +work/monorepo-path "/creator/creator-protobufs"))
    ("inbox" ,(concat +work/monorepo-path "/inbox/inbox-protobufs"))
    ("core" ,(concat +work/monorepo-path "/core/core-protobufs"))
    ("crm" ,(concat +work/monorepo-path "/crm/crm-protobufs"))
    ("chat" ,(concat +work/monorepo-path "/chat/chat-protobufs"))))

(defun +work/goto-proto ()
  (interactive)
  (let* ((project-name (projectile-project-name))
         (name-chunks (split-string project-name "-"))
         (module (car name-chunks))
         (is-plugin (equal (cadr name-chunks) "plugin"))
         (proto-name (if is-plugin
           (concat "plugins/" (string-join (cddr name-chunks) "-"))
           (string-join (cdr name-chunks) "_")))
         (proto-root (nth 1 (assoc module (+work/proto-paths)))))

    (find-file-other-window (concat proto-root "/" proto-name))))

(defun +work/consult-monorepo ()
  (interactive)
  (consult-ripgrep +work/monorepo-path ""))

(defvar +work/consult-monorepo-last-glob nil)

(defun +work/consult-monorepo-glob ()
  (interactive)
  (let* ((glob (read-string "glob: " (or +work/consult-monorepo-last-glob
                                          (concat "*." (file-name-extension (buffer-name))))))
         (consult-ripgrep-args
          (concat
           "rg "
           "--line-buffered "
           "--color=never "
           "--max-columns=1000 "
           "--path-separator / "
           "--no-heading "
           "--smart-case "
           "--line-number "
           "--glob " "\"" glob "\""
           ". ")))

    (setq +work/consult-monorepo-last-glob glob)

    (consult-ripgrep +work/monorepo-path "")))

(defun +work/consult-find-file-monorepo ()
  (interactive)
  (consult-fd +work/monorepo-path))
#+end_src

#+begin_src emacs-lisp :results none
(defvar remote-host
  "ubuntu@34.245.164.252")

(defun +work/run-nlp ()
  (interactive)
  (async-shell-command (s-concat "ssh -i ~/.ssh/NLP.pem ubuntu@34.245.164.252 'tmux send-keys -t 0 \"clear; python " (buffer-name) "\" ENTER'")))

(defun +work/sync-nlp ()
  (interactive)

  (let* ((file-path (s-chop-prefix "/home/porcupine/work/" buffer-file-name)))
    (async-shell-command (s-concat "rsync " buffer-file-name " " remote-host ":/home/ubuntu/" file-path))))

(defun +work/setup-nlp-file-save-hook ()
  (interactive)

  (add-hook 'after-save-hook '+work/sync-nlp 0 t))

(defun +work/setup-nlp-project-save-hook ()
  (interactive)

  (dolist (file (projectile-current-project-files)) 
    (with-current-buffer
      (or (get-file-buffer (concat (projectile-project-root) file))
          (find-file-noselect (concat (projectile-project-root) file)))

      (+work/setup-nlp-file-save-hook))))
#+end_src

** Version update
#+begin_src emacs-lisp results :none
(use-package version-update
  :load-path "~/.emacs.default/packages/work/version-update"
  :defer t
  :commands (+work/update-versions +work/apply-changes))
#+end_src

* School
#+begin_src emacs-lisp :results none
(defun school/next-class ()
  (interactive)

  (let* ((class-type (completing-read "Type: " '("Ćwiczenia" "Wykład")))
         (subject (car (s-split " - " (+org/property-value "TITLE"))))
         (date (pcase (s-split "-" (org-read-date))
                 (`(,year ,month ,day . nil) (s-join "." `(,day ,month ,year)))
                 (_ (error "Could not parse date."))))
         (header (if (equal class-type "Ćwiczenia") "Ćwiczenia" "Wykłady"))
         (count (-reduce '+ (org-element-map (org-element-parse-buffer) 'headline
                              (lambda (h)
                                (if (equal header (org-element-property :raw-value
                                                                             (org-element-property :parent h)))
                                    1 0)))))
         (ctype-str (if (equal class-type "Ćwiczenia") " - ćwiczenia " " - wykład ") )
         (title (concat subject ctype-str (number-to-string (+ 1 count)) " (" date ")")))

    (pcase 
        (car 
         (remove nil
                 (org-map-entries (lambda ()
                                    (let ((elem (org-element-at-point)))
                                      (if (equal header (s-trim (org-element-property :raw-value elem)))
                                          (progn
                                            (org-insert-heading-after-current)
                                            (org-demote)
                                            (let ((beg (point)))
                                              (insert title)
                                              `(,beg ,(point))))))))))
      (`(,beg ,end . nil)
       (set-mark beg)
       (goto-char end)
       (activate-mark)
       (org-roam-node-insert))
      (_ (error "Couldn't mark region.")))))
#+end_src

* My packages
** RSVP
#+begin_src emacs-lisp :results none
(use-package prsvp
  :load-path "~/.emacs.default/packages/prsvp/"
  :defer t
  :commands rsvp/run)
#+end_src

** Pscreenshot
#+begin_src emacs-lisp :results none
(use-package pscreenshot
  :load-path "~/.emacs.default/packages/pscreenshot/"
  :defer t
  :commands (pscreenshot/org-screenshot-take +ocr/screenshot))
#+end_src

** Upgrade versions
** Flash
#+begin_src emacs-lisp :results none
(use-package flash
  :load-path "~/.emacs.default/packages/flash/"
  :commands (flash-open-notes flash-mode))
#+end_src

** Focus
#+begin_src emacs-lisp :results none
(use-package pfocus
  :load-path "~/.emacs.default/packages/pfocus/"
  :defer t
  :commands p/focus-mode)
#+end_src

* Utils
#+begin_src emacs-lisp :results none
(defun p/send-to-goodnotes ()
  (interactive)

  (let ((goodnotes-address "me.bc8rmga@goodnotes.email")
        (path (buffer-file-name)))

    (mu4e-compose-new)

    (save-excursion
      (beginning-of-buffer)
      (search-forward "To: " nil t)
      (end-of-line)
      (insert goodnotes-address)

      (search-forward "Subject: " nil t)
      (end-of-line)
      (insert "file upload")

      (end-of-buffer)

      (insert (concat "\n<#part filename=\"" path "\" disposition=attachment><#/part>")))

    (evil-force-normal-state)))
#+end_src

#+begin_src emacs-lisp :results none
(defun convert-timestamp-at-point ()
  (interactive)
  (let ((word (current-word)))
    (left-word)
    (kill-word 1)
    (insert (format-time-string "\"%d-%m-%Y %H:%M:%S\"" (seconds-to-time (/ (string-to-number word) 1000))))))
#+end_src

#+begin_src emacs-lisp :results none
(defun copy-without-newlines ()
   (interactive)
   (mark-paragraph)
   (kill-ring-save (region-beginning) (region-end))
   (deactivate-mark)

   (with-temp-buffer
     (yank)
     (mark-paragraph)
     (evil-join (region-beginning) (region-end))
     (mark-paragraph)
     (kill-ring-save (region-beginning) (region-end))))
#+end_src

