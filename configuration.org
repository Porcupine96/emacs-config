* Startup
#+begin_src emacs-lisp :results none
  (defvar file-name-handler-alist-old file-name-handler-alist)

  (setq package-enable-at-startup nil
        file-name-handler-alist nil
        message-log-max 16384
        gc-cons-threshold 402653184
        gc-cons-percentage 0.6
        auto-window-vscroll nil)

  (add-hook 'after-init-hook
            `(lambda ()
               (setq file-name-handler-alist file-name-handler-alist-old
                     gc-cons-threshold 800000
                     gc-cons-percentage 0.1)
               (message "Emacs started in: %s" (emacs-init-time))
               (garbage-collect)) t)
#+end_src
* Configure =use-package=
I use =use-package= to install and configure my packages. My =init.el=
includes the initial setup for =package.el= and ensures that
=use-package= is installed, since I wanna do that right away.

This makes sure that =use-package= will install the package if it's
not already available. It also means that I should be able to open
Emacs for the first time on a fresh Debian box and have my whole
environment automatically installed. I'm not /totally/ sure about
that, but we're gettin' close.

#+begin_src emacs-lisp :results none
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the newest version available.
#+begin_src emacs-lisp :results none
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+end_src

* Visuals
 Font.
 #+begin_src emacs-lisp :results none
 (set-face-attribute 'default nil
 		    :family "SF Mono"
 		    :height 120
 		    :weight 'normal
 		    :width 'normal)
 #+end_src
  
 Hide the bezels.
 #+begin_src emacs-lisp :results none
 (tool-bar-mode -1)
 (menu-bar-mode -1)
 (toggle-scroll-bar -1)
 #+end_src

 Color theme.
 #+begin_src emacs-lisp :results none
 (add-to-list 'custom-theme-load-path "~/my-emacs/themes")
 (load-theme 'noctilux t)
 #+end_src
 
* Sensible settings
  Disable backup and lockfiles.
  #+begin_src emacs-lisp :results none
  (setq make-backup-files nil)
  (setq create-lockfiles nil)
  #+end_src

  Disable saving the clipboard after exiting Emacs.
  #+begin_src emacs-lisp :results none
  (setq x-select-enable-clipboard-manager nil)
  #+end_src
  
  Convert tabs to spaces.
  #+begin_src emacs-lisp :results none
  (setq tab-width 2)
  (setq indent-tabs-mode nil)
  #+end_src
  
  Ask before closing emasc.
  #+begin_src emacs-lisp :results none
  (setq confirm-kill-emacs 'y-or-n-p)
  #+end_src
  
  Use colors in compilation buffer.
  defer?
  #+begin_src emacs-lisp :results none
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (ansi-color-apply-on-region compilation-filter-start (point)))
    
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
  #+end_src
  
  Open buffer position
  #+begin_src emacs-lisp :results none
    (setq display-buffer-alist
       '(("\\*\\(compilation\\|Flycheck errors\\)\\*"
          (display-buffer-in-side-window)
          (side            . bottom)
          (reusable-frames . visible)
          (window-height   . 0.33))

         ("\\*Org todo\\*"
          (display-buffer-in-side-window)
          (side            . bottom)
          (reusable-frames . visible)
          (window-height   . 0.2))

         ("\\*\\([Hh]elp\\|Messages\\)\\*"
          (display-buffer-in-side-window)
          (side           . right)
          (window-width   . 0.5))

         ("\\*\\(eshell\\|Python\\)\\*"
          (display-buffer-in-side-window)
          (side           . bottom)
          (window-height  . 0.4))

         ("\\*\\(Buffer List\\)\\*"
          (display-buffer-same-window))

         ("^magit:.*"
          (display-buffer-same-window))))
  #+end_src
  
  Line wrapping.
  #+begin_src emacs-lisp :results none
    (global-visual-line-mode t)
    (setq-default truncate-lines t)
    (setq truncate-lines t)
    (setq truncate-partial-width-windows nil)
  #+end_src
  
* Miscellaneous
#+begin_src emacs-lisp :results none
(setq auth-sources '("~/.authinfo"))
#+end_src

* Configure =general=
** Leader Key
#+begin_src emacs-lisp :results none
  (use-package general
    :ensure t
    :init
     (setq general-override-states '(insert
                                     emacs
                                     hybrid
                                     normal
                                     visual
                                     motion
                                     operator
                                     replace)))

  (general-create-definer leader-def 
    :prefix "SPC")

  (leader-def
    :states '(normal visual motion)
    :keymaps 'override
      "a" #'hydra-agenda/body
      "b" #'hydra-buffer/body
      "c" #'hydra-compile/body
      "h" #'hydra-help/body
      "f" #'hydra-file/body
      "g" #'hydra-git/body
      "l" #'hydra-lsp/body
      "k" #'counsel-yank-pop
      "p" #'hydra-project/body
      "r" #'hydra-resize/body
      "o" #'hydra-open/body
      "s" #'hydra-search/body
      "u" #'universal-argument
      "w" #'hydra-window/body
      "e e" #'elfeed
      "e d" #'ediff
      "t r" #'+core/reload-theme
      "y a" #'yas-new-snippet
      "y v" #'yas-visit-snippet-file
      "RET" #'counsel-bookmark
      "TAB" #'hydra-workspace/body
      "SPC" #'counsel-projectile-find-file
      "," #'counsel-projectile-switch-to-buffer)
#+end_src

** Local leader
#+begin_src emacs-lisp :results none
  (general-create-definer local-leader-def
    :prefix "SPC m")
  
  (local-leader-def
    :states 'normal
    :keymaps 'org-mode-map
      "s" #'org-schedule
      "d" #'org-deadline
      "t" #'org-todo)
      
  (local-leader-def
    :states 'normal
    :keymaps 'python-mode-map
      "s" #'run-python)
#+end_src

** SPC j (org-mode)
#+begin_src emacs-lisp :results none
  (general-define-key 
    :prefix "SPC j"
    :states 'normal
    :keymaps 'org-mode-map
    "a" (lambda () (interactive) (jupyter-org-insert-src-block nil current-prefix-arg))
    "b" (lambda () (interactive) (jupyter-org-insert-src-block t current-prefix-arg))
    "x" #'jupyter-org-kill-block-and-results
    "c" #'org-babel-remove-result
    "j" #'org-babel-next-src-block
    "k" #'org-babel-previous-src-block
    "r" #'jupyter-run-repl
    "E" #'jupyter-org-execute-to-point)
#+end_src

* Use =evil-mode=
  Use =evil-mode=
  #+begin_src emacs-lisp :results none
  (use-package evil
    :ensure t
    :demand
    :init
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)
    (setq aw-keys '(?h ?j ?k ?l ?a ?s ?d ?f))
    :bind (:map evil-motion-state-map
          ("C-w C-w" . ace-window)
          ("C-w w"   . ace-window)))
  
  (use-package evil-collection
    :after evil
    :ensure t
    :config
      (evil-collection-init))
    
  (setq evil-ex-substitute-global t)
  #+end_src

  Use =evil-commentary=
  #+begin_src emacs-lisp :results none
  (use-package evil-commentary
     :after evil)
  (evil-commentary-mode)
  #+end_src
  
  Use =evil-surround=
  #+begin_src emacs-lisp :results none
  (use-package evil-surround
     :ensure t
     :after evil
     :config
       (global-evil-surround-mode 1))
  #+end_src

* Configure =hydra=
  #+begin_src emacs-lisp :results none
  (use-package hydra
   :custom 
     (head-hint nil)
     (hydra-key-format-spec "[%s]"))
  #+end_src
  
** Agenda
   #+begin_src emacs-lisp :results none
   (defhydra hydra-agenda (:color blue)
     "
     ^
     ^Agenda^     
     ^────^───────────
     _a_ Agenda
     _w_ Weekly agenda
     _d_ Daily agenda
     ^^        
     ^^        
     "
     ("a" #'org-agenda)
     ("w" #'+agenda/weekly-agenda)
     ("d" #'+agenda/daily-agenda))

   #+end_src
** Compile
  #+begin_src emacs-lisp :results none
  (defhydra hydra-compile (:color blue)
    "
    ──────────────────────────────
    _x_ Flycheck list errors
    _c_ Compile
    _C_ Recompile
    ^^        
    "
    ("x" #'flycheck-list-errors)
    ("c" #'compile)
    ("C" #'recompile))
  #+end_src
   
** File 
  #+begin_src emacs-lisp :results none
  (defhydra hydra-file (:color blue)
    "
    ^
    ^File^     
    ^────^───────────
    _f_ Find 
    _r_ Recent
    _a_ current.org
    _s_ resources.org
    _d_ dotfiles
    _c_ Config
    _t_ Theme
    ^^        
    ^^        
    "
    ("f" #'counsel-find-file)
    ("r" #'counsel-recentf)
    ("a" (lambda () (interactive)(find-file "~/Dropbox/org/todo/current.org")))
    ("s" (lambda () (interactive)(find-file "~/Dropbox/org/resources/resources.org")))
    ("d" (lambda () (interactive)(dired "~/dotfiles")))
    ("c" (lambda () (interactive)(find-file "~/my-emacs/configuration.org")))
    ("t" (lambda () (interactive)(find-file "~/my-emacs/themes/noctilux-theme.el"))))
  #+end_src

** Project 
#+begin_src emacs-lisp :results none
  (defhydra hydra-project (:color blue)
    "
    ^
    ^Project^     
    ^────^───────────
    _a_ Add project
    _c_ Compile project
    _C_ Recompile project
    _p_ Switch project
    _f_ Find project file
    _i_ Invalidate project cache
    _t_ Add current project to treemacs
    _s_ Save project files
    ^^        
    ^^        
    "
    ("a" #'projectile-add-known-project)
    ("c" #'projectile-compile-project)
    ("C" #'projectile-repeat-last-command)
    ("f" #'counsel-projectile-ag)
    ("p" #'counsel-projectile-switch-project)
    ("i" #'projectile-invalidate-cache)
    ("t" #'treemacs-add-and-display-current-project)
    ("s" #'projectile-save-project-buffers))
#+end_src

** Buffer
#+begin_src emacs-lisp :results none
  (defhydra hydra-buffer (:color blue)
    "
    ^
    ^Buffer^     
    ^──────^───────────────
    _b_ Ivy switch buffer
    _n_ Next buffer
    _N_ New buffer
    _k_ Kill buffer
    _p_ Previous buffer
    ^^        
    ^^        
    "
    ("b" #'ivy-switch-buffer)
    ("n" #'next-buffer)
    ("N" #'+core/empty-buffer)
    ("p" #'previous-buffer)
    ("k" #'kill-current-buffer))
#+end_src

** Git 
   #+begin_src emacs-lisp :results none
     (defhydra hydra-forge (:color blue)
       "
       ^
       ^Forge^     
       ^────^───────────
       _a_ Assign reviewer
       _b_ Browse
       _c_ Create PR
       _p_ Browse PR
       ^^        
       "
       ("a" #'forge-edit-topic-review-requests)
       ("b" #'forge-browse-remote)
       ("c" #'forge-create-pullreq)
       ("p" #'forge-browse-pullreq))
   #+end_src
   
   #+begin_src emacs-lisp :results none
   (defhydra hydra-git (:color blue)
     "
     ^
     ^Git^     
     ^────^───────────
     _g_ Magit status
     _i_ Magit init
     _p_ Magit push
     _r_ Remote (forge)
     _t_ Timemachine
     ^^        
     "
     ("g" #'magit-status)
     ("i" #'magit-init)
     ("p" #'magit-push)
     ("r" #'hydra-forge/body)
     ("t" #'git-timemachine))
   #+end_src

** LSP
#+begin_src emacs-lisp :results none
  (defhydra hydra-lsp (:color blue)
    "
    ^
    ^LSP^     
    ^────^───────────
    _b_ Metals build import
    _d_ Go to type definition
    _s_ Describe session
    _e_ Error list
    _f_ Format
    _l_ Find symbol
    _t_ LSP Hydra toggle
    _r_ Find references
    _R_ Remove other workspaces
    _i_ Go to implementation
    _I_ Copy Import
    ^^        
    "
    ("b" #'lsp-metals-build-import)
    ("d" #'lsp-find-definition)
    ("s" #'lsp-describe-session)
    ("e" #'lsp-ui-flycheck-list)
    ("f" #'lsp-format-buffer)
    ("l" #'lsp-ivy-workspace-symbol)
    ("t" #'hydra-lsp-toggle/body)
    ("T" #'lsp-treemacs-errors-list)
    ("r" #'lsp-find-references)
    ("R" #'+lsp/remove-other-sessions)
    ("i" #'lsp-goto-implementation)
    ("I" #'+scala/copy-import))
#+end_src

#+begin_src emacs-lisp :results none
 (defhydra hydra-lsp-toggle (:color blue)
    "
    ^
    ^Toggle^     
    ^────^───────────
    _m_ iMenu
    ^^        
    "
    ("m" #'lsp-ui-imenu))
#+end_src
   
** Help
   #+begin_src emacs-lisp :results none
   (defhydra hydra-help (:color blue)
     "
     ^
     ^Help^     
     ^────^───────────
     _k_ Describe key
     _f_ Describe function
     _F_ Describe face
     _v_ Describe variable
     _p_ Describe package
     _m_ Describe mode
     _M_ Describe macro
     _e_ Message buffer
     ^^        
     ^^        
     "
     ("k" #'helpful-key)
     ("f" #'helpful-function)
     ("F" #'describe-face)
     ("v" #'helpful-variable)
     ("p" #'helpful-package)
     ("m" #'describe-mode)
     ("M" #'helpful-macro)
     ("e" #'view-echo-area-messages))
   #+end_src
   
** Open
#+begin_src emacs-lisp :results none
 (defhydra hydra-open (:color blue)
   "
   ^
   ^Open^     
   ^────^───────────
   _p_ Treemacs
   _e_ Eshell
   _o_ Olivetti
   ^^        
   ^^        
   "
   ("p" #'treemacs)
   ("e" #'eshell)
   ("o" #'olivetti-mode))
 #+end_src

** Search
#+begin_src emacs-lisp :results none
 (defhydra hydra-search (:color blue)
   "
   ^
   ^Search^     
   ^────^───────────
   _i_ Counsel iMenu
   _m_ Monorepo Ag
   _s_ Surround 
   ^^        
   "
   ("i" #'counsel-imenu)
   ("m" #'+work/search-monorepo)
   ("s" #'hydra-surround/body))
 #+end_src
 
#+begin_src emacs-lisp :results none
 (defhydra hydra-surround (:color blue)
   "
   ^
   ^Surround^     
   ^────^───────────
   _l_ List
   _o_ Option
   _i_ IO
   _f_ Future
   ^^        
   "
   ("l" #'+scala/surround-word-with-list)
   ("o" #'+scala/surround-word-with-option)
   ("i" #'+scala/surround-word-with-io)
   ("f" #'+scala/surround-word-with-future))
 #+end_src
 
** Workspace
 #+begin_src emacs-lisp :results none 
 (defhydra hydra-workspace (:color blue)
   "
   ^
   ^Workspace^     
   ^─────────^───────────
   _c_ Create workspace
   _d_ Kill workspace
   _n_ Create named workspace
   _k_ Kill workspace
   _r_ Rename workspace
   ^^        
   ^^        
   "
   ("c" #'persp-switch)
   ("d" #'persp-kill)
   ("n" (lambda () (interactive) (persp-switch (generate-new-buffer-name "workspace"))))
   ("k" #'persp-kill)
   ("r" #'persp-rename))
 #+end_src
** Window
#+begin_src emacs-lisp :results none
  (defhydra hydra-window (:color blue)
    "
    ^ 
    _u_ Winner undu
    _r_ Winner redo
    _f_ Floating window
    _j_ Regular window at bottom 
    _l_ Regular window on right
    ^^
    ^^ 
    "
    ("u" #'winner-undo)
    ("r" #'winner-redo)
    ("f" #'+core/to-floating-frame)
    ("l" #'+core/to-regular-right-window)
    ("j" #'+core/to-regular-bottom-window))
#+end_src
** Resize
#+begin_src emacs-lisp :results none
 (defhydra hydra-resize (:color blue)
   "
   ^
   ^Resize^     
   ^────^───────────
   _h_ evil-window-decrease-width
   _l_ evil-window-increase-width
   ^^        
   "
   ("h" #'evil-window-decrease-width)
   ("l" #'evil-window-increase-width))
 #+end_src

* Global keybindings 
  Buffer commands.
  #+begin_src emacs-lisp :results none
  (global-set-key (kbd "C-x C-x") #'save-buffer)
  (global-set-key (kbd "C-x C-b") #'ibuffer)
  (global-set-key (kbd "C-c b n") #'next-buffer)
  (global-set-key (kbd "C-c b p") #'previous-buffer)
  #+end_src
  
  Dired jump.
  #+begin_src emacs-lisp :results none
  (global-set-key (kbd "C-x C-j") 'dired-jump)
  #+end_src
  
  Toggle line truncation.
  #+begin_src emacs-lisp :results none
 (global-set-key (kbd "C-x w") 'toggle-truncate-lines)
  #+end_src
  
  Easier movements between splits.
  #+begin_src emacs-lisp :results none
  (global-set-key (kbd "C-h") #'evil-window-left)
  (global-set-key (kbd "C-j") #'evil-window-down)
  (global-set-key (kbd "C-k") #'evil-window-up)
  (global-set-key (kbd "C-l") #'evil-window-right)
  #+end_src
  
  Only window.
  #+begin_src emacs-lisp :results none
  (global-set-key (kbd "C-c o") #'delete-other-windows)
  #+end_src
  
  Winner mode.
  #+begin_src emacs-lisp :results none
  (global-set-key (kbd "C-c h") #'winner-undo)
  (global-set-key (kbd "C-c l") #'winner-redo)
  #+end_src
  
  Vim-like screen jumping.
  #+begin_src emacs-lisp :results none
  (global-set-key (kbd "C-u") #'evil-scroll-up)
  #+end_src
  
  Use "C-w d" to close a window.
  #+begin_src emacs-lisp :results none
  (define-key evil-window-map (kbd "d") #'evil-window-delete)
  #+end_src
  
  Use =zoom-window=.
  #+begin_src emacs-lisp :results none
  (define-key evil-window-map (kbd "o") #'zoom-window-zoom)
  (define-key evil-window-map (kbd "C-o") #'zoom-window-zoom)
  #+end_src
  
  Use =org-capture=.
  #+begin_src emacs-lisp :results none
  (global-set-key (kbd "C-c c") #'org-capture)
  #+end_src
  
  Scale text.
  #+begin_src emacs-lisp :results none
  (global-set-key (kbd "C-+") #'text-scale-increase)
  (global-set-key (kbd "C--") #'text-scale-decrease)
  #+end_src
  
* Misc Functions
  #+begin_src emacs-lisp :results none
 (defun +core/empty-buffer () 
    (interactive)
    (switch-to-buffer (generate-new-buffer "empty")))
  #+end_src
  
  #+begin_src emacs-lisp :results none
  (defun +core/reload-theme ()
     (interactive)
     (let ((theme (-first-item custom-enabled-themes)))
        (load-theme theme t)))
  #+end_src
  
  Search Monorepo.
  #+begin_src emacs-lisp :results none
    (defun +work/search-monorepo ()
      (interactive)
      (counsel-rg "" "/home/porcupine/codeheroes/chatbotize/monorepo"))
  #+end_src
  
  Based on excelent [[https://protesilaos.com/dotemacs/#h:0077f7e0-409f-4645-a040-018ee9b5b2f2][LINK]]
  #+begin_src emacs-lisp :results none
    (defun +core/to-floating-frame()
      (interactive)
      (delete-window)
      (make-frame '((name . "floating")
                    (window-system . x)
                    (minibuffer . nil))))

     (defun +core/to-regular-bottom-window()
        (interactive)
        (+core/to-regular-window `bottom))

    (defun +core/to-regular-right-window()
       (interactive)
       (+core/to-regular-window `right))

     (defun +core/to-regular-window(position)
       (let ((buffer (current-buffer)))
         (with-current-buffer buffer
           (delete-window)
           (pcase position
             (`bottom (display-buffer-at-bottom buffer nil))
             (`right (display-buffer-in-direction buffer '((direction . right))))))))
  #+end_src
  
  #+begin_src emacs-lisp :results none
 (defun +core/surround-word-with (left right)
   (backward-to-word 1)
   (forward-to-word 1)
   (kill-word 1)
   (insert left)
   (yank)
   (insert right))
  #+end_src

* Configure =which-key=
  #+begin_src emacs-lisp :results none
    (use-package which-key
      :ensure t
      :defer t
      :init (which-key-mode))
  #+end_src
  
* Configure =avy= / =evil-easymotion= / =evil-snipe=
  #+begin_src emacs-lisp :results none
  (use-package avy 
    :defer t)
    
  (use-package evil-easymotion
    :defer t)
  #+end_src
  
  #+begin_src emacs-lisp :results none
  (define-key evil-motion-state-map (kbd "g s k") #'evilem-motion-previous-line)
  (define-key evil-motion-state-map (kbd "g s j") #'evilem-motion-next-line)
  (define-key evil-motion-state-map (kbd "g s f") #'evil-avy-goto-char)
  (define-key evil-motion-state-map (kbd "g s s") #'evil-avy-goto-char-2)
  #+end_src

  Use =evil-snipe=
  #+begin_src emacs-lisp :results none
  (use-package evil-snipe 
     :after evil)
     
  ;;(require 'evil-snipe)
  #+end_src
  
* Configure =perspecitve=
Use [[https://github.com/nex3/perspective-el][perspective]] to manage workspaces.
#+begin_src emacs-lisp :results none
  (use-package perspective 
    :defer 5
    :init
      (persp-mode)
    :config 
      (define-key evil-normal-state-map (kbd "gt") #'persp-next)
      (define-key evil-normal-state-map (kbd "gT") #'persp-prev))
#+end_src

* Configure =ivy= / =counsel= / =swiper=
  Default =ivy= configuration.
  #+begin_src emacs-lisp :results none
    (use-package ivy
       :config
         (setq ivy-use-virtual-buffers t)
         (setq ivy-initial-inputs-alist nil)
         (setq enable-recursive-minibuffers t)
         (setq search-default-mode #'char-fold-to-regexp)
         (ivy-mode 1)
         (global-set-key (kbd "C-c C-r") 'ivy-resume)
         (global-set-key (kbd "<f6>") 'ivy-resume))

    (use-package swiper
      :after ivy
      :config
        (global-set-key "\C-s" 'swiper))

    (use-package counsel 
      :after ivy
      :config
        (global-set-key (kbd "M-x") 'counsel-M-x)
        (global-set-key (kbd "C-x C-f") 'counsel-find-file)
        (global-set-key (kbd "C-c g") 'counsel-git)
        (global-set-key (kbd "C-c j") 'counsel-git-grep)
        (global-set-key (kbd "C-c k") 'counsel-ag)
        (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))

    ;; sorts counsel-M-x by recently used
    (use-package smex :after counsel)
  #+end_src
  
  Recentf configuration.
  #+begin_src emacs-lisp :results none
  (setq recentf-max-saved-items 200)
  #+end_src
  
  #+begin_src emacs-lisp :results none
    (use-package ivy-posframe
      :ensure
      :after ivy
      :config
      (setq ivy-posframe-parameters
            '((left-fringe . 2)
              (right-fringe . 2)
              (internal-border-width . 2)))

      (setq ivy-posframe-display-functions-alist
            '((complete-symbol . ivy-posframe-display-at-point)
              (swiper . ivy-display-function-fallback)
              (t . ivy-posframe-display-at-frame-center)))
      (ivy-posframe-mode 1))
  #+end_src
* Configure =flycheck=
  #+begin_src emacs-lisp :results none
    (use-package flycheck
      :defer t
      :init (global-flycheck-mode)
      :bind (:map evil-normal-state-map 
            ("[ e" . flycheck-previous-error)
            ("] e" . flycheck-next-error))

      :config 
        (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
  #+end_src
* Configure =org=
** Core
#+begin_src emacs-lisp :results none
  (use-package org
    :ensure org-plus-contrib
    :custom 
      (org-fontify-done-headline t)
      (org-todo-keywords
        '((sequence "TODO(t)" "PROJ(p)" "STRT(s)" "WAIT(w)" "|" "DONE(d!)" "KILL(k)")
         (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")))
    :config 
      (require 'org-tempo)
      (evil-collection-define-key 'normal 'org-mode-map
        (kbd "C-k") 'evil-window-up
        (kbd "C-j") 'evil-window-down)

    :bind (:map evil-normal-state-map
      ("C-k" . evil-window-up)
      ("C-j" . evil-window-down)
      ("RET" . +org/dwim)
      ("C-M-<return>" . #'org-insert-subheading))
    :hook (org-mode . org-indent-mode))
#+end_src

#+begin_src emacs-lisp :results none
(use-package org-bullets
   :after org
   :hook (org-mode . org-bullets-mode))
#+end_src
  
Do not ask whether it is save to evaluate a snippet of code.
#+begin_src emacs-lisp :results none 
(setq org-confirm-babel-evaluate nil)
#+end_src

Automatically save archive buffer after archiving a task.
#+begin_src emacs-lisp :results none
(defun org-archive-save-buffer ()
  (let ((afile (car (org-all-archive-files))))
    (if (file-exists-p afile)
      (let ((buffer (find-file-noselect afile)))
          (with-current-buffer buffer
            (save-buffer)))
      (message "Ooops ... (%s) does not exist." afile))))

(add-hook 'org-archive-hook 'org-archive-save-buffer)
#+end_src
 
Org tag placement.
#+begin_src emacs-lisp :results none
(setq org-tags-column -1)
#+end_src

** Org Agenda 
#+begin_src emacs-lisp :results none
 (use-package evil-org
 :ensure t
 :after org
 :config
 (add-hook 'org-mode-hook 'evil-org-mode)
 (add-hook 'evil-org-mode-hook
(lambda ()
(evil-org-set-key-theme)))
 (require 'evil-org-agenda)
 (evil-org-agenda-set-keys))
#+end_src

#+begin_src emacs-lisp :results none
  (use-package org-super-agenda
    :hook (org-agenda-mode . org-super-agenda-mode)
    :config
    (setq
org-super-agenda-groups
  '((:name "Today"
     :time-grid t
     :todo "TODAY"))))
#+end_src

#+begin_src emacs-lisp :results none
(setq org-agenda-files '("~/Dropbox/org/todo/current.org"))
#+end_src

#+begin_src emacs-lisp :results none
(defun +agenda/weekly-agenda ()
  (interactive)
  (org-agenda nil "a"))
  
(defun +agenda/daily-agenda ()
  (interactive)
  (let ((org-agenda-span 1))
    (org-agenda nil "a")))
#+end_src
** Academic
#+begin_src emacs-lisp :results none
(use-package org-ref :defer t)
#+end_src
 
#+begin_src emacs-lisp :results none
(use-package academic-phrases :defer t)
#+end_src
   
** Org Capture
#+begin_src emacs-lisp :results none
  (setq org-default-notes-file (concat org-directory "~/Dropbox/org/todo/notes.org"))

  (setq org-capture-templates
        '(("i" "Inbox" entry (file+headline "~/Dropbox/org/todo/current.org" "Inbox")
           "* TODO %?\n%T\n")
          ("a" "AGH" entry (file+olp "~/Dropbox/org/todo/current.org" "Actionable" "AGH")
           "* TODO %?\n%T\n")))
#+end_src

** Org Babel
Load languages.
#+begin_src emacs-lisp :results none
(org-babel-do-load-languages 'org-babel-load-languages
 '(
     (shell . t)
     (emacs-lisp . t)
     (python . t)
     (jupyter . t)
 )
)
#+end_src

Fix tab indentation in source blocks.
#+begin_src emacs-lisp :results none
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
#+end_src

Setup images.
#+begin_src emacs-lisp :results none
(setq org-startup-with-inline-images t)

(add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
#+end_src

Change the image background. 
#+begin_src emacs-lisp :results none
(defun create-image-with-background-color (args)
  "Specify background color of Org-mode inline image through modify `ARGS'."
  (let* ((file (car args))
         (type (cadr args))
         (data-p (caddr args))
         (props (cdddr args)))
    ;; get this return result style from `create-image'
    (append (list file type data-p)
            (list :background  "#F0E68C")
            props)))

(advice-add 'create-image :filter-args
            #'create-image-with-background-color)
#+end_src

** Functions
#+begin_src emacs-lisp :results none
  (defun +org/dwim ()
    (interactive)
    (let* ((context (org-element-context))
           (type (org-element-type context)))
    (pcase type
      (`headline
       (let ((todo-keyword (org-element-property :todo-keyword context)))
         (if todo-keyword
             (org-todo)
           (message "Nothing to do"))))
  )))
#+end_src

* Configure =yasnippet=
  #+begin_src emacs-lisp :results none
  (use-package yasnippet
    :defer 5
    :config 
      (yas-global-mode))
  #+end_src
  
* Configure =projectile=
 #+begin_src emacs-lisp :results none
   (use-package projectile 
     :ensure t
     :defer t
     :config
       (projectile-global-mode)
       (setq projectile-project-search-path '("~/codeheroes/chatbotize/monorepo"))
       (setq projectile-enable-caching t)
       (setq projectile-project-root-files-functions #'(projectile-root-top-down
                                                          projectile-root-top-down-recurring
                                                          projectile-root-bottom-up
                                                          projectile-root-local))

       ;; TODO: think whether this one is needed
       (projectile-register-project-type 'scala '("build.sbt")))

   (use-package counsel-projectile
      :after projectile) 
 #+end_src
 
* Configure =magit=
 #+begin_src emacs-lisp :results none
 (use-package magit :defer t)
 (use-package evil-magit :after magit)
 (use-package forge :after magit)
 #+end_src
 
 vc-annotate options.
 #+begin_src emacs-lisp :results none
;; (setq vc-git-annotate-switches '("-c"))
 #+end_src

* Configure =git-timemachine=
 #+begin_src emacs-lisp :results none
  (use-package git-timemachine 
    :ensure t
    :defer t)
 #+end_src

* Configure =treemacs=
#+begin_src emacs-lisp :results none
   (use-package treemacs 
      :ensure t
      :defer t
      :config 
        (define-key treemacs-mode-map (kbd "SPC o p") #'treemacs)
        (setq treemacs-width 60))

   (use-package treemacs-evil
     :after treemacs 
     :bind (:map evil-treemacs-state-map 
           ("SPC u" . #'universal-argument))
     :config
       (define-key evil-treemacs-state-map (kbd "SPC o p") #'treemacs))

   (use-package treemacs-projectile
     :after treemacs)
#+end_src

#+begin_src emacs-lisp :results none
(defun +treemacs/add-current-project-as-only ()
  (interactive)
  (-each (treemacs-workspace->projects (treemacs-current-workspace))
    #'treemacs-do-remove-project-from-workspace)
  (treemacs-add-and-display-current-project))
#+end_src

* Configure =doom-modeline=
  #+begin_src emacs-lisp :results none
    (use-package doom-modeline
      :ensure t 
      :config 
        (setq doom-modeline-height 35)
        (setq doom-modeline-vcs-max-length 40)
        (setq doom-modeline-enable-word-count t)
        (set-face-attribute 'mode-line nil :height 115))
  #+end_src
* Configure =zoom-window=
 #+begin_src emacs-lisp :results none
   (use-package zoom-window 
      :ensure t
      :defer t
      :config
        (custom-set-variables
          '(zoom-window-mode-line-color "#4682B4")))
 #+end_src
* Configure =company=
  #+begin_src emacs-lisp :results none
  (use-package company
    :defer t
    :config
      (global-company-mode 1)
      (with-eval-after-load 'company
          (define-key company-mode-map (kbd "C-<space>") #'company-complete)
          (define-key company-active-map (kbd "<return>") #'company-complete-selection)
          (define-key company-active-map (kbd "<tab>") #'company-complete-common)
          (define-key company-active-map (kbd "TAB") #'company-complete-common))
      (setq company-backends '(company-lsp company-capf company-yasnippet company-dabbrev))
      (setq company-dabbrev-downcase nil))
  #+end_src
* Configure =smartparens=
 #+begin_src emacs-lisp :results none
   (use-package smartparens
    :init 
      (smartparens-global-mode)
    :config
      (require 'smartparens-config))
 #+end_src
 
* Configure =helpful=
 #+begin_src emacs-lisp :results none
 (use-package helpful :defer t)
 #+end_src

* Configure =keychain=
  #+begin_src emacs-lisp :results none
  (use-package keychain-environment
     :ensure t
     :defer 5
     :config (keychain-refresh-environment))
  #+end_src

* Configure =ox-reveal=
#+begin_src emacs-lisp :results none
(use-package ox-reveal
  :defer t)
  
(use-package org-re-reveal
  :defer t)
#+end_src

* Configure =jupyter=
#+begin_src emacs-lisp :results none
(use-package jupyter
  :defer t)
#+end_src

* Configure =emojify=
defer?
#+begin_src emacs-lisp :results none
(use-package emojify 
   :ensure t
   :config
     (set-fontset-font t 'unicode "Noto Color Emoji" nil 'prepend))
#+end_src

* Configure =olivetti=
#+begin_src emacs-lisp :results none
(use-package olivetti
  :ensure t
  :defer t
  :config 
    (setq olivetti-body-width 120)
    (setq olivetti-recall-visual-line-mode-entry-state t))
#+end_src

* Configure =dired=
#+begin_src emacs-lisp :results none
  (use-package dired-subtree
    :ensure t
    :after dired
    :config
    :bind (:map dired-mode-map
                ("<tab>" . dired-subtree-toggle)
                ("<C-tab>" . dired-subtree-cycle)
                ("<backtab>" . dired-subtree-remove)))

  (setq dired-listing-switches "-alh")
#+end_src
* Configure =ediff=
#+begin_src emacs-lisp :results none
(use-package ediff
  :ensure t 
  :defer t
  :config
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-forward-word-function 'forward-char))
#+end_src

* Languages
** Dockerfile
#+begin_src emacs-lisp :results none
(use-package dockerfile-mode
  :defer t
  :config
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+end_src
** Python
Setup =python-mode=.
#+begin_src emacs-lisp :results none
  (use-package python-mode
     :ensure t
     :defer t)

  ;; (setq
  ;;   python-shell-interpreter "ipython"
  ;;   python-shell-interpreter-args "-i")
#+end_src
   
#+begin_src emacs-lisp :results none
  (use-package pyenv-mode
    :after python-mode
    :init
      (let ((pyenv-path (expand-file-name "~/.pyenv/bin")))
        (setenv "PATH" (concat pyenv-path ":" (getenv "PATH")))
        (add-to-list 'exec-path pyenv-path)))

  (use-package pyvenv
    :defer t)
    ;; :after python-mode)
#+end_src

#+begin_src emacs-lisp :results none
  (defun +pyvenv/set-to-pyenv ()
    (interactive)
    (pyvenv-activate
       (pyenv-mode-full-path (pyenv-mode-version))))
#+end_src

#+begin_src emacs-lisp :results none
(use-package blacken
  :after python-mode
  :hook (python-mode . blacken-mode))
#+end_src

#+begin_src emacs-lisp :results none
  (use-package lsp-python-ms
    :ensure t
    :after python-mode
    :init (setq lsp-python-ms-auto-install-server t)
    :hook (
           (python-mode . lsp-deferred)
           (python-mode . (lambda ()
                            ;; (setq lsp-python-ms-extra-paths '())
                            (require 'lsp-python-ms)))))
#+end_src

** Scala
scala-mode
#+begin_src emacs-lisp :results none
  (use-package scala-mode
    :ensure t
    :mode "\\.s\\(cala\\|bt\\)$")
#+end_src

sbt-mode
#+begin_src emacs-lisp :results none
  (use-package sbt-mode
    :after scala-mode
    :commands sbt-start sbt-command
    :config
      (substitute-key-definition
         'minibuffer-complete-word
         'self-insert-command
          minibuffer-local-completion-map)

      (setq sbt:program-options '("-Dsbt.supershell=false")))
#+end_src

#+begin_src emacs-lisp :results none
(defun +scala/copy-import ()
    (interactive)
    (setq import
      (replace-regexp-in-string "package" "import"
      (concat
        (car (split-string (buffer-string) "\n"))
        "."
        (thing-at-point 'word))))

    (message "Copied: %s" import)
    (kill-new import))
#+end_src

#+begin_src emacs-lisp :results none
(defun +scala/surround-word-with-list ()
  (interactive)
  (+core/surround-word-with "List[" "]"))
  
(defun +scala/surround-word-with-option ()
  (interactive)
  (+core/surround-word-with "Option[" "]"))
  
(defun +scala/surround-word-with-future ()
  (interactive)
  (+core/surround-word-with "Future[" "]"))
  
(defun +scala/surround-word-with-io ()
  (interactive)
  (+core/surround-word-with "IO[" "]"))
#+end_src
   
** Protobuf
   #+begin_src emacs-lisp :results none
   (use-package protobuf-mode
     :ensure t 
     :defer t)
   
   (defconst my-protobuf-style
     '((c-basic-offset . 4)
      (indent-tabs-mode . nil)))

    (add-hook 'protobuf-mode-hook 
      (lambda () (c-add-style "my-style" my-protobuf-style t)))
   #+end_src
   
** LSP
#+begin_src emacs-lisp :results none
  (use-package lsp-mode
   :hook ((scala-mode . lsp)
          (sh-mode . lsp-deferred))
   :config
         (setq lsp-prefer-flymake nil)
   :bind (:map evil-normal-state-map 
         ("M-w" . +lsp-ui/toggle-doc-focus)          
         ("C-<return>" . lsp-execute-code-action)))
#+end_src

#+begin_src emacs-lisp :results none
(use-package lsp-ui :after lsp-mode)
#+end_src

#+begin_src emacs-lisp :results none
(use-package lsp-metals :after lsp-mode scala-mode)
#+end_src

Use =lsp-ivy=.
#+begin_src emacs-lisp :results none
(use-package lsp-ivy
  :after lsp-mode
  :commands lsp-ivy-workspace-symbol)
#+end_src

#+begin_src emacs-lisp :results none
(use-package company-lsp
  :after lsp-mode company
  :custom
   (company-lsp-cache-candidates t)
   (company-lsp-async t)
   (company-lsp-enable-snippet t)
   (company-lsp-enable-recompletion t)
  :commands company-lsp)
#+end_src

#+begin_src emacs-lisp :results none
(defun +lsp-ui/toggle-doc-focus ()
  (interactive)
  (if (lsp-ui-doc--visible-p)
      (lsp-ui-doc-focus-frame)
      (lsp-ui-doc-unfocus-frame)))
#+end_src

Remove other LSP sessions.
#+begin_src emacs-lisp :results none
(defun +lsp/remove-other-sessions ()
    (interactive)
    (-each 
        (-remove-item
            (lsp-find-session-folder (lsp-session) default-directory)
            (lsp-session-folders (lsp-session)))
        #'lsp-workspace-folders-remove))
#+end_src
   
** Yaml
#+begin_src emacs-lisp :results none
(use-package yaml-mode 
  :defer t)
#+end_src

** SQL
#+begin_src emacs-lisp :results none
(defun +sql/align ()
  (interactive)
  (let ((rule
	 (list (list nil
		     (cons 'regexp  "\\(\\s-*\\)\\(VARCHAR\\|NOT NULL\\|TIMESTAMP\\)")
		     (cons 'group 1)
		     (cons 'bogus nil)
		     (cons 'spacing 3)
		     (cons 'repeat t)))))
    (align-region (region-beginning) (region-end) 'entire rule nil nil)))
#+end_src

* Configure =Info=
#+begin_src emacs-lisp :results none
  (use-package info
    :defer t
    :bind (:map evil-normal-state-map
      ("RET" . 'Info-follow-nearest-node)))
#+end_src

* Configure =csv-mode=
#+begin_src emacs-lisp :results none
(use-package csv-mode
  :ensure t
  :defer t)
#+end_src

* Configure =eshell=
#+begin_src emacs-lisp :results none
  (defun +eshell/clear ()
    (interactive)
    (eshell/clear 1)
    (eshell-send-input)
    (evil-insert nil))
#+end_src

#+begin_src emacs-lisp :results none
  (use-package eshell
   :defer t
   :bind (:map eshell-mode-map
          ("C-l" . +eshell/clear)))
#+end_src

* Configure =elfeed=
  #+begin_src emacs-lisp :results none
    (use-package elfeed
      :defer t
      :custom
        (elfeed-search-remain-on-entry t)
      :config
        (setq elfeed-feeds 
              '(("https://michalplachta.com/feed.xml")
                ("https://www.youtube.com/feeds/videos.xml?channel_id=UC6fXiuFCWAnVPwRhBMztLlQ" youtube) ;; Leeren
                ("https://degoes.net/feed.xml")
                ("https://blog.softwaremill.com/feed")
                ("https://sachachua.com/blog/feed" emacs)
                ))
        (setq-default elfeed-search-filter "@6-months-ago +unread")

        (evil-collection-define-key 'normal 'elfeed-search-mode-map
          (kbd "RET") '+elfeed/show-entry
          "b" '+elfeed/browse-url
          "G" 'elfeed-update))

    ;; (use-package elfeed-goodies
    ;;   :after elfeed
    ;;   :config
    ;;     (elfeed-goodies/setup))
  #+end_src
  
  #+begin_src emacs-lisp :results none
    (defun +elfeed/show-entry (entry)
      (interactive (list (elfeed-search-selected :ignore-region)))
      (require 'elfeed-show)
      (when (elfeed-entry-p entry)
        (elfeed-search-update-entry entry)
        (unless elfeed-search-remain-on-entry (forward-line))
        (elfeed-show-entry entry)))

     (defun +elfeed/browse-url (&optional use-generic-p)
       (interactive "P")
       (let ((entries (elfeed-search-selected)))
         (cl-loop for entry in entries
                  do (elfeed-untag entry 'unread)
                  when (elfeed-entry-link entry)
                  do (if use-generic-p
                         (browse-url-generic it)
                       (browse-url it)))
         (unless (or elfeed-search-remain-on-entry (use-region-p))
           (forward-line))))
  #+end_src

* Configure =winner=
#+begin_src emacs-lisp :results none
(use-package winner
  :hook (after-init-hook . winner-mode))
#+end_src

* Configure =string-inflection=
#+begin_src emacs-lisp :results none
  (use-package string-inflection 
    :ensure t
    :defer t)
#+end_src

* TMP
  #+begin_src emacs-lisp :results none
    (global-visual-line-mode t)
    (setq-default truncate-lines t)
    (setq truncate-lines t)
    (setq truncate-partial-width-windows nil)
  #+end_src
  
  #+begin_src emacs-lisp :results none
    (defun toggle-x ()
      (interactive)
      (if (eq ?x (char-after))
        (progn
          (delete-char 1)
          (insert " ")
          (backward-char))
        (progn
          (delete-char 1)
          (insert "x")
          (backward-char))))
  #+end_src
  
* TODO TODOs
  - [ ] java script / react stuff
  - [ ] workgroups.el
  - [ ] if do not run a command on hydra missclick (e.g. "SPC f p" runs "p" as paste)
  - [ ] anzu?
  - [ ] bookmarks
  - [ ] line numbers?
  - [ ] startup
  - [ ] agenda
  - [ ] general.el
  - [ ] vc on doom-modeline did not refresh after changing a branch
  - [ ] reimplement py-indent-or-complete
    
