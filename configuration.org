* Configure =use-package=

I use =use-package= to install and configure my packages. My =init.el= includes
the initial setup for =package.el= and ensures that =use-package= is installed,
since I wanna do that right away.

This makes sure that =use-package= will install the package if it's not already
available. It also means that I should be able to open Emacs for the first time
on a fresh Debian box and have my whole environment automatically installed. I'm
not /totally/ sure about that, but we're gettin' close.

#+BEGIN_SRC emacs-lisp :results none
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC

Always compile packages, and use the newest version available.

#+BEGIN_SRC emacs-lisp :results none
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+END_SRC

* Sensible settings
  Disable backup and lockfiles.
  #+BEGIN_SRC emacs-lisp :results none
  (setq make-backup-files nil)
  (setq create-lockfiles nil)
  #+END_SRC

  Disable saving the clipboard after exiting Emacs.
  #+BEGIN_SRC emacs-lisp :results none
  (setq x-select-enable-clipboard-manager nil)
  #+END_SRC
  
  Convert tabs to spaces.
  #+BEGIN_SRC emacs-lisp :results none
  (setq tab-width 2)
  (setq indent-tabs-mode nil)
  #+END_SRC
  
  Ask before closing emasc.
  #+begin_src emacs-lisp :results none
  (setq confirm-kill-emacs 'y-or-n-p)
  #+end_src
  
  Use colors in compilation buffer.
  #+begin_src emacs-lisp :results none
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (ansi-color-apply-on-region compilation-filter-start (point)))
    
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
  #+end_src
  
  Open buffer position
  #+begin_src emacs-lisp :results none
  ;; (setq display-buffer-alist' nil)
  (setq display-buffer-alist '((rx ".*") (display-buffer-reuse-window inhibit-same-window)))
  #+end_src
  
  Line wrapping.
  #+begin_src emacs-lisp :results none
  (global-visual-line-mode t)
  (set-default 'truncate-lines t)
  #+end_src

* Miscellaneous
  #+begin_src emacs-lisp :results none
  (setq auth-sources '("~/.authinfo"))
  #+end_src

* Visuals
  Font.
  #+BEGIN_SRC emacs-lisp :results none
  (set-face-attribute 'default nil
  		    :family "SF Mono"
  		    :height 120
  		    :weight 'normal
  		    :width 'normal)
  #+END_SRC
  
  Color theme.
  #+BEGIN_SRC emacs-lisp :results none
  (add-to-list 'custom-theme-load-path "~/my-emacs/themes")
  (load-theme 'noctilux t)
  #+END_SRC
  
  Hide the bezels.
  #+BEGIN_SRC emacs-lisp :results none
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  #+END_SRC
  
* Configure =emacs-bind-map= 
  #+begin_src emacs-lisp :results none
 (use-package bind-map)
 
 (bind-map org-major-map
   :evil-keys ("SPC m")
   :evil-states (normal motion visual)
   :bindings (
    "s" #'org-schedule
    "d" #'org-deadline)
   :major-modes (org-mode))
 
 (bind-map base-leader-map
   :evil-keys ("SPC")
   :evil-states (normal motion visual)
   :bindings (
    "a" #'hydra-agenda/body
    "b" #'hydra-buffer/body
    "c" #'hydra-compile/body
    "h" #'hydra-help/body
    "f" #'hydra-file/body
    "g" #'hydra-git/body
    "l" #'hydra-lsp/body
    "k" #'counsel-yank-pop
    "p" #'hydra-project/body
    "o" #'hydra-open/body
    "s" #'hydra-search/body
    "u" #'universal-argument
    "t r" #'+core/reload-theme
    "y a" #'yas-new-snippet
    "y v" #'yas-visit-snippet-file
    "RET" #'counsel-bookmark
    "TAB" #'hydra-workspace/body
    "SPC" #'counsel-projectile-find-file
    "," #'counsel-projectile-switch-to-buffer))
  #+end_src
  
* Use =evil-mode=

  Use =evil-mode=
  #+BEGIN_SRC emacs-lisp :results none
  (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))
  
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
    
  (setq evil-ex-substitute-global t)
  #+END_SRC

  Use =evil-commentary=
  #+BEGIN_SRC emacs-lisp :results none
  (use-package 
     evil-commentary
     :ensure t
     :after evil)
  (evil-commentary-mode)
  #+END_SRC
  
  Use =evil-surround=
  #+begin_src emacs-lisp :results none
  (use-package 
     evil-surround
     :ensure t
     :after evil
     :config
     (global-evil-surround-mode 1))
  #+end_src

* Configure =hydra=
  #+BEGIN_SRC emacs-lisp :results none
  (use-package hydra
   :custom 
     (head-hint nil)
     (hydra-key-format-spec "[%s]"))
  #+END_SRC
  
** Agenda
   #+begin_src emacs-lisp :results none
   (defhydra hydra-agenda (:color blue)
     "
     ^
     ^Agenda^     
     ^────^───────────
     _a_ Weekly agenda 
     ^^        
     ^^        
     "
     ("a" #'+agenda/weekly-agenda))

   #+end_src
** Compile
  #+BEGIN_SRC emacs-lisp :results none
  (defhydra hydra-compile (:color blue)
    "
    ──────────────────────────────
    _x_ Flycheck list errors
    ^^        
    "
    ("x" #'flycheck-list-errors))
  #+END_SRC
   
** File 
  #+BEGIN_SRC emacs-lisp :results none
  (defhydra hydra-file (:color blue)
    "
    ^
    ^File^     
    ^────^───────────
    _f_ Find 
    _r_ Recent
    _c_ Config
    ^^        
    ^^        
    "
    ("f" #'counsel-find-file)
    ("r" #'counsel-recentf)
    ("c" (lambda () (interactive)(find-file "~/my-emacs/configuration.org"))))
  #+END_SRC

** Project 
  #+BEGIN_SRC emacs-lisp :results none
    (defhydra hydra-project (:color blue)
      "
      ^
      ^Project^     
      ^────^───────────
      _a_ Add project
      _c_ Compile project
      _p_ Switch project
      _f_ Find project file
      _i_ Invalidate project cache
      _t_ Add current project to treemacs
      _s_ Save project files
      ^^        
      ^^        
      "
      ("a" #'projectile-add-known-project)
      ("c" #'projectile-compile-project)
      ("f" #'counsel-projectile-ag)
      ("p" #'counsel-projectile-switch-project)
      ("i" #'projectile-invalidate-cache)
      ("t" #'treemacs-add-and-display-current-project)
      ("s" #'projectile-save-project-buffers))
  #+END_SRC

** Buffer
   #+begin_src emacs-lisp :results none
   (defhydra hydra-buffer (:color blue)
     "
     ^
     ^Buffer^     
     ^──────^───────────────
     _n_ Next buffer
     _N_ New uffer
     _k_ Kill buffer
     _p_ Previous buffer
     ^^        
     ^^        
     "
     ("n" #'next-buffer)
     ("N" #'+core/empty-buffer)
     ("p" #'previous-buffer)
     ("k" #'kill-current-buffer))
   #+end_src

** Git 
   #+begin_src emacs-lisp :results none
   (defhydra hydra-forge (:color blue)
     "
     ^
     ^Forge^     
     ^────^───────────
     _b_ Browse
     _c_ Create PR
     _p_ Browse PR
     ^^        
     "
     ("b" #'forge-browse-remote)
     ("c" #'forge-create-pullreq)
     ("p" #'forge-browse-pullreq))
   #+end_src
   
   #+begin_src emacs-lisp :results none
   (defhydra hydra-git (:color blue)
     "
     ^
     ^Git^     
     ^────^───────────
     _g_ Magit status
     _i_ Magit init
     _r_ Remote (forge)
     ^^        
     "
     ("g" #'magit-status)
     ("i" #'magit-init)
     ("r" #'hydra-forge/body)
     ("t" #'git-timemachine))
   #+end_src

** LSP
   #+begin_src emacs-lisp :results none
   (defhydra hydra-lsp (:color blue)
     "
     ^
     ^LSP^     
     ^────^───────────
     _b_ Metals build import
     _s_ Describe session
     _e_ Error list
     _f_ Format
     _l_ Find symbol
     _r_ Remove LSP workspace
     _R_ Remove other workspaces
     ^^        
     "
     ("b" #'lsp-metals-build-import)
     ("s" #'lsp-describe-session)
     ("e" #'lsp-ui-flycheck-list)
     ("f" #'lsp-format-buffer)
     ("l" #'lsp-ivy-workspace-symbol)
     ("r" #'lsp-workspace-folders-remove)
     ("R" #'+lsp/remove-other-sessions)
     ("i" #'+scala/copy-import))
   #+end_src
   
   Remove other LSP sessions.
   #+begin_src emacs-lisp :results none
    (defun +lsp/remove-other-sessions ()
        (interactive)
	(-each 
	    (-remove-item
		(lsp-find-session-folder (lsp-session) default-directory)
		(lsp-session-folders (lsp-session)))
	    #'lsp-workspace-folders-remove))
   #+end_src
** Help
   #+begin_src emacs-lisp :results none
   (defhydra hydra-help (:color blue)
     "
     ^
     ^Help^     
     ^────^───────────
     _k_ Describe key
     _f_ Describe function
     _F_ Describe face
     _v_ Describe variable
     _p_ Describe package
     _m_ Describe mode
     _M_ Describe macro
     _e_ Message buffer
     ^^        
     ^^        
     "
     ("k" #'helpful-key)
     ("f" #'helpful-function)
     ("F" #'describe-face)
     ("v" #'helpful-variable)
     ("p" #'helpful-package)
     ("m" #'describe-mode)
     ("M" #'helpful-macro)
     ("e" #'view-echo-area-messages))
   #+end_src
   
** Open
   #+begin_src emacs-lisp :results none
   (defhydra hydra-open (:color blue)
     "
     ^
     ^Open^     
     ^────^───────────
     _p_ Treemacs
     _e_ Eshell
     ^^        
     ^^        
     "
     ("p" #'treemacs)
     ("e" #'eshell))
   #+end_src

** Search
   #+begin_src emacs-lisp :results none
   (defhydra hydra-search (:color blue)
     "
     ^
     ^LSP^     
     ^────^───────────
     _i_ Counsel iMenu
     _m_ Monorepo Ag
     ^^        
     "
     ("i" #'counsel-imenu)
     ("m" #'+work/search-monorepo))
   #+end_src
** Workspace
   #+begin_src emacs-lisp :results none 
     (defhydra hydra-workspace (:color blue)
       "
       ^
       ^Workspace^     
       ^─────────^───────────
       _c_ Create workspace
       _d_ Kill workspace
       _n_ Create named workspace
       _k_ Kill workspace
       _r_ Rename workspace
       ^^        
       ^^        
       "
       ("c" #'persp-switch)
       ("d" #'persp-kill)
       ("n" (lambda () (interactive) (persp-switch (generate-new-buffer-name "workspace"))))
       ("k" #'persp-kill)
       ("r" #'persp-rename))
   #+end_src

* Global keybindings  
  #+BEGIN_SRC emacs-lisp :results none
 ;; (define-key evil-normal-state-map (kbd "SPC a") #'hydra-agenda/body)
 ;; (define-key evil-normal-state-map (kbd "SPC b") #'hydra-buffer/body)
 ;; (define-key evil-normal-state-map (kbd "SPC c") #'hydra-compile/body)
 ;; (define-key evil-normal-state-map (kbd "SPC h") #'hydra-help/body)
 ;; (define-key evil-normal-state-map (kbd "SPC f") #'hydra-file/body)
 ;; (define-key evil-normal-state-map (kbd "SPC g") #'hydra-git/body)
 ;; (define-key evil-normal-state-map (kbd "SPC l") #'hydra-lsp/body)
 ;; (define-key evil-normal-state-map (kbd "SPC k") #'counsel-yank-pop)
 ;; (define-key evil-normal-state-map (kbd "SPC p") #'hydra-project/body)
 ;; (define-key evil-normal-state-map (kbd "SPC o") #'hydra-open/body)
 ;; (define-key evil-normal-state-map (kbd "SPC s") #'hydra-search/body)
 ;; (define-key evil-normal-state-map (kbd "SPC u") #'universal-argument)
 ;; (define-key evil-normal-state-map (kbd "SPC t r") #'+core/reload-theme)
 ;; (define-key evil-normal-state-map (kbd "SPC y a") #'yas-new-snippet)
 ;; (define-key evil-normal-state-map (kbd "SPC y v") #'yas-visit-snippet-file)
 ;; (define-key evil-normal-state-map (kbd "SPC RET") #'counsel-bookmark)
 ;; (define-key evil-normal-state-map (kbd "SPC TAB") #'hydra-workspace/body)
 ;; (define-key evil-normal-state-map (kbd "SPC SPC") #'counsel-projectile-find-file)
 ;; (define-key evil-normal-state-map (kbd "SPC ,") #'counsel-projectile-switch-to-buffer)
  #+END_SRC
  
  Save buffer.
  #+BEGIN_SRC emacs-lisp :results none
  (global-set-key (kbd "C-x C-x") 'save-buffer)
 #+END_SRC
  
  Easier movements between splits.
  #+BEGIN_SRC emacs-lisp :results none
  (global-set-key (kbd "C-h") #'evil-window-left)
  (global-set-key (kbd "C-j") #'evil-window-down)
  (global-set-key (kbd "C-k") #'evil-window-up)
  (global-set-key (kbd "C-l") #'evil-window-right)
  #+END_SRC
  
  Vim-like screen jumping.
  #+begin_src emacs-lisp :results none
  (global-set-key (kbd "C-u") #'evil-scroll-up)
  #+end_src
  
  Use "C-w d" to close a window.
  #+BEGIN_SRC emacs-lisp :results none
  (define-key evil-window-map (kbd "d") #'evil-window-delete)
  #+END_SRC
  
  Use =zoom-window=.
  #+begin_src emacs-lisp :results none
  (define-key evil-window-map (kbd "o") #'zoom-window-zoom)
  (define-key evil-window-map (kbd "C-o") #'zoom-window-zoom)
  #+end_src
  
  Scale text.
  #+begin_src emacs-lisp :results none
  (global-set-key (kbd "C-+") #'text-scale-increase)
  (global-set-key (kbd "C--") #'text-scale-decrease)
  #+end_src

* Misc Functions
  #+begin_src emacs-lisp :results none
 (defun +core/empty-buffer () 
    (interactive)
    (switch-to-buffer-other-window (generate-new-buffer "empty")))
  #+end_src
  
  #+begin_src emacs-lisp :results none
  (defun +core/reload-theme ()
     (interactive)
     (let ((theme (-first-item custom-enabled-themes)))
        (load-theme theme t)))
  #+end_src
  
  Search Monorepo.
  #+begin_src emacs-lisp :results none
    (defun +work/search-monorepo ()
      (interactive)
      (counsel-ag "" "/home/porcupine/codeheroes/chatbotize/monorepo"))
  #+end_src

* Configure =which-key=
  #+begin_src emacs-lisp :results none
  (use-package which-key
    :ensure t
    :init (which-key-mode))
  #+end_src
  
* Configure =avy= / =evil-easymotion= / =evil-snipe=
  #+begin_src emacs-lisp :results none
  (use-package avy)
  (use-package evil-easymotion)
  #+end_src
  
  #+begin_src emacs-lisp :results none
  (define-key evil-motion-state-map (kbd "g s k") #'evilem-motion-previous-line)
  (define-key evil-motion-state-map (kbd "g s j") #'evilem-motion-next-line)
  (define-key evil-motion-state-map (kbd "g s f") #'evil-avy-goto-char)
  (define-key evil-motion-state-map (kbd "g s s") #'evil-avy-goto-char-2)
  #+end_src

  Use =evil-snipe=
  #+begin_src emacs-lisp :results none
  (use-package evil-snipe)
  (require 'evil-snipe)
  ;; (define-key evil-normal-state-map (kbd "f") #'evil-snipe-F)
  #+end_src
  
* Configure =perspecitve=
  Use [[https://github.com/nex3/perspective-el][perspective]] to manage workspaces.
  #+BEGIN_SRC emacs-lisp :results none
  (use-package perspective)
  (persp-mode)
  #+END_SRC
  
  Better keybindings.
  #+BEGIN_SRC emacs-lisp :results none
  (define-key evil-normal-state-map (kbd "gt") #'persp-next)
  (define-key evil-normal-state-map (kbd "gT") #'persp-prev)
  #+END_SRC

* Configure =ivy= / =counsel= / =swiper=
  Default =ivy= configuration.
  #+BEGIN_SRC emacs-lisp :results none
    (use-package ivy)
    (use-package swiper)
    (use-package counsel)
    
    ;; sorts counsel-M-x by recently used
    (use-package smex)

    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-initial-inputs-alist nil)
    (setq enable-recursive-minibuffers t)
    (setq search-default-mode #'char-fold-to-regexp)
    
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
  #+END_SRC
* Configure =flycheck=
  #+begin_src emacs-lisp :results none
  (use-package flycheck
    :init (global-flycheck-mode)
    
    :bind (:map evil-normal-state-map 
          ("[ e" . flycheck-previous-error)
	  ("] e" . flycheck-next-error)))
  #+end_src
* Configure =org=
  #+BEGIN_SRC emacs-lisp :results none
  (use-package org
    :ensure org-plus-contrib
    :custom (org-fontify-done-headline t)
    :config (require 'org-tempo)
    :bind (:map evil-normal-state-map
      ("C-k" . evil-window-up)
      ("C-j" . evil-window-down)
      :map org-mode-map
      ("C-k" . evil-window-up)
      ("C-j" . evil-window-down))
    :hook (org-mode . org-indent-mode))
  #+END_SRC
  
  #+begin_src emacs-lisp :results none
  (use-package org-bullets
     :after org
     :hook (org-mode . org-bullets-mode))
  #+end_src
  
  #+begin_src emacs-lisp :results none 
  (setq org-confirm-babel-evaluate nil)
  #+end_src
  
  #+begin_src emacs-lisp :results none
  (defvar +org/keymap (make-sparse-keymap))
	(define-key +org/keymap (kbd "s") #'org-schedule)
	(define-key +org/keymap (kbd "d") #'org-deadline)
  #+end_src

  
** Org Agenda 
   #+begin_src emacs-lisp :results none
    (use-package evil-org
    :ensure t
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
		(lambda ()
		(evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
   #+end_src
   
   #+begin_src emacs-lisp :results none
     (use-package org-super-agenda
       :hook (org-agenda-mode . org-super-agenda-mode)
       :config
       (setq
	 org-super-agenda-groups
	   '((:name "Today"
	      :time-grid t
	      :todo "TODAY"))))
   #+end_src
   
   #+begin_src emacs-lisp :results none
   (setq org-agenda-files '("~/Dropbox/org/todo/current.org"))
   #+end_src

   #+begin_src emacs-lisp :results none
   (defun +agenda/weekly-agenda ()
     (interactive)
     (org-agenda)
     (org-agenda-week-view))
   #+end_src
** Adademic
   #+begin_src emacs-lisp :results none
   (use-package org-ref)
   #+end_src
   
   #+begin_src emacs-lisp :results none
   (use-package academic-phrases)
   #+end_src
   
   # #+begin_src emacs-lisp :results none
   # (setq synonyms-file "~/thesaurus/mthesaur.txt")
   # (require 'synonyms)
   # #+end_src
** Org Babel
   #+begin_src emacs-lisp :results none
   (org-babel-do-load-languages 'org-babel-load-languages
    '(
        (shell . t)
    )
   )
   #+end_src

* Configure =yasnippet=
  #+BEGIN_SRC emacs-lisp :results none
  (use-package yasnippet
    :defer t)
  (yas-global-mode)
  #+END_SRC
  
* Configure =projectile=
  #+BEGIN_SRC emacs-lisp :results none
  (use-package projectile)
  (use-package counsel-projectile) 
  
  (projectile-global-mode)
  (setq projectile-enable-caching t)
  #+END_SRC
  
  #+begin_src emacs-lisp :results none
    (setq projectile-project-search-path '("~/codeheroes/chatbotize/monorepo"))
    ;; (setq projectile-project-root-files-functions '(projectile-root-local projectile-root-bottom-up projectile-root-top-down projectile-root-top-down-recurring))

    (setq projectile-project-root-files-functions #'(projectile-root-top-down
						  projectile-root-top-down-recurring
						  projectile-root-bottom-up
						  projectile-root-local))

     (projectile-register-project-type 'scala '("build.sbt"))
  #+end_src

* Configure =magit=
  #+begin_src emacs-lisp :results none
  (use-package magit)
  (use-package evil-magit)
  (use-package forge)
  (require 'evil-magit)
  #+end_src

* Configure =git-timemachine=
  #+begin_src emacs-lisp :results none
  (use-package git-timemachine)
  #+end_src

* Configure =treemacs=
  #+begin_src emacs-lisp :results none
    (use-package treemacs)

    (use-package treemacs-evil
      :after treemacs
      :bind (:map evil-treemacs-state-map 
            ("SPC u" . #'universal-argument)))

    (use-package treemacs-projectile)

    (setq treemacs-width 60)

    (define-key evil-treemacs-state-map (kbd "SPC o p") #'treemacs)
    (define-key treemacs-mode-map (kbd "SPC o p") #'treemacs)
  #+end_src
  
  #+begin_src emacs-lisp :results none
  (defun +treemacs/add-current-project-as-only ()
    (interactive)
    (-each (treemacs-workspace->projects (treemacs-current-workspace))
      #'treemacs-do-remove-project-from-workspace)
    (treemacs-add-and-display-current-project))
  #+end_src
  
* Configure =doom-modeline=
  #+begin_src emacs-lisp :results none
    (use-package doom-modeline
      :ensure t)
  #+end_src
* Configure =zoom-window=
  #+begin_src emacs-lisp :results none
  (use-package zoom-window)
  
  (custom-set-variables
   '(zoom-window-mode-line-color "#4682B4"))
  #+end_src
* Configure =company=
  #+begin_src emacs-lisp :results none
  (use-package company
  :config
    (global-company-mode 1)
    (with-eval-after-load 'company
	(define-key company-mode-map (kbd "C-<space>") #'company-complete)
	(define-key company-active-map (kbd "<return>") #'company-complete-selection)
	(define-key company-active-map (kbd "<tab>") #'company-complete-common)
	(define-key company-active-map (kbd "TAB") #'company-complete-common)))
  
  (setq company-backends '(company-lsp company-capf company-yasnippet))
  #+end_src
* Configure =smartparens=
  #+begin_src emacs-lisp :results none
  (use-package smartparens
   :config
     (require 'smartparens-config))
     
  (smartparens-global-mode)
  #+end_src
* Configure =dired=
  #+begin_src emacs-lisp :results none
 (define-key dired-mode-map (kbd "J") #'dired-up-directory)
  #+end_src
  
* Configure =helpful=
  #+begin_src emacs-lisp :results none
  (use-package helpful)
  #+end_src

* Configure =keychain=
  #+begin_src emacs-lisp :results none
  (use-package keychain-environment
     :config (keychain-refresh-environment))
  #+end_src

* Languages
** Dockerfile
   #+begin_src emacs-lisp :results none
   (use-package dockerfile-mode
     :config
     (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
   #+end_src
** Python
   Setup =python-mode=.
   #+BEGIN_SRC emacs-lisp :results none
   (use-package python-mode)
   
   (setq
     python-shell-interpreter "ipython"
     python-shell-interpreter-args "-i")
   #+END_SRC
   
   
   #+begin_src emacs-lisp :results none
   (use-package pyenv-mode
     :init
       (let ((pyenv-path (expand-file-name "~/.pyenv/bin")))
         (setenv "PATH" (concat pyenv-path ":" (getenv "PATH")))
         (add-to-list 'exec-path pyenv-path))
     :after python-mode)
     
   (use-package pyvenv
     :after python-mode)
   #+end_src
   

   #+begin_src emacs-lisp :results none
   (use-package blacken
     :after python-mode
     :hook (python-mode . blacken-mode))
   #+end_src

** Scala
   scala-mode
   #+begin_src emacs-lisp :results none
    (use-package scala-mode
    :mode "\\.s\\(cala\\|bt\\)$")
   #+end_src
   
   sbt-mode
   #+begin_src emacs-lisp :results none
    (use-package sbt-mode
    :commands sbt-start sbt-command
    :config
    (substitute-key-definition
    'minibuffer-complete-word
    'self-insert-command
    minibuffer-local-completion-map)
    ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
    (setq sbt:program-options '("-Dsbt.supershell=false")))
   #+end_src
   
   #+begin_src emacs-lisp :results none
   (defun +scala/copy-import ()
       (interactive)
       (setq import
         (replace-regexp-in-string "package" "import"
         (concat
           (car (split-string (buffer-string) "\n"))
           "."
           (thing-at-point 'word))))
   
       (message "Copied: %s" import)
       (kill-new import))
   #+end_src
   
** Elisp
   #+begin_src emacs-lisp :results none
   (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
   #+end_src
   
** Protobuf
   #+begin_src emacs-lisp :results none
   (use-package protobuf-mode)
   
   (defconst my-protobuf-style
     '((c-basic-offset . 4)
      (indent-tabs-mode . nil)))

    (add-hook 'protobuf-mode-hook 
      (lambda () (c-add-style "my-style" my-protobuf-style t)))
   #+end_src
   
** LSP
   #+begin_src emacs-lisp :results none
   (use-package lsp-mode
    :hook ((scala-mode . lsp-deferred)
           (sh-mode . lsp-deferred)
           (python-mode . lsp-deferred))
    :config (setq lsp-prefer-flymake nil)
    :bind (:map evil-normal-state-map 
          ("C-<return>" . lsp-execute-code-action)))
   #+end_src

   #+begin_src emacs-lisp :results none
   (use-package lsp-ui)
   #+end_src
   
   Use =lsp-ivy=.
   #+begin_src emacs-lisp :results none
   (use-package lsp-ivy
     :after lsp-mode
     :commands lsp-ivy-workspace-symbol)
   #+end_src
   
   #+begin_src emacs-lisp :results none
   (use-package company-lsp
     :after lsp-mode company
     :custom
      (company-lsp-cache-candidates t)
      (company-lsp-async t)
      (company-lsp-enable-snippet t)
      (company-lsp-enable-recompletion t)
     :commands company-lsp)
   #+end_src
   
* TODO TODOs
  - [ ] java script / react stuff
  - [ ] workgroups.el
  - [ ] pasting a link does not work
  - [ ] whether to open a buffer (e.g magit-buffer on the left/right/bottom)
  - [ ] if do not run a command on hydra missclick (e.g. "SPC f p" runs "p" as paste)
  - [ ] anzu?
  - [ ] bookmarks
  - [ ] line numbers?
  - [ ] startup
  - [ ] agenda
  - [ ] forge
  - [ ] company-backends based on major-mode
  - [ ] general.el
  - [ ] vc on doom-modeline did not refresh after changing a branch
  - [ ] reimplement py-indent-or-complete
    
